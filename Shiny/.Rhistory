owners <- sapply(self@factorsDataList, FUN = function(x) {x$owner})
ownerFactorsData <- self@factorsDataList[which(owners == owner)]
if (length(ownerFactorsData) == 0) {warning("Factor values are not set for this owner!"); return(NULL)}
factorsNames <- sapply(ownerFactorsData, FUN = function(x) {names(x$values)})
dim(factorsNames) <- prod(dim(factorsNames))
uniqueFactorsNames <- unique(factorsNames)
df <- lapply(uniqueFactorsNames, FUN = function(x)
{
res <- sapply(ownerFactorsData, FUN = function(y)
{
y$values[[which(names(y$values) == x)]]
})
names(res) <- NULL
return(res)
})
ownerIDs <- lapply(ownerFactorsData, FUN = function(x) {x$ownerID})
print(ownerIDs)
stop()
df <- append(ownerIDs, df)
names(df) <- c("ownerID", uniqueFactorsNames)
return(data.frame(df, stringsAsFactors = F))
ownersIDs <- as.integer(unique(ownersFactors$ownerID))
varCnt <- length(factorsIDs)
factorNames <- sapply(factorsIDs, function(x) {getNameByFactorID(availableFactors,x)})
df <- list()
for (ownerID in ownersIDs)
{
ownerFactorsIDs <- ownersFactors$factorID[ownersFactors$ownerID == ownerID]
varPositions <- sapply(ownerFactorsIDs, function(x) which(factorsIDs == x))
values <- ownersFactors$value[which(ownersFactors$ownerID == ownerID)]
df <- rbind(df, c(rep(NA, varCnt)))
df[nrow(df), varPositions] <- values
}
df <- as.data.frame(df)
colnames(df) <- factorNames
factorTypes <- sapply(factorsIDs, function(x) {getTypeByFactorID(availableFactors,x)})
factorLevels <- sapply(factorsIDs, function(x) {getLevelsByFactorID(availableFactors,x)})
for (i in 1:length(df))
{
if (factorTypes[i] == "integer") {df[,i] <- as.integer(df[,i])}
if (factorTypes[i] == "numeric") {df[,i] <- as.numeric(df[,i])}
if (factorTypes[i] == "factor") {df[,i] <- factor(df[,i], levels = factorLevels[[i]])}
if (factorTypes[i] == "ordFactor") {df[,i] <- ordered(df[,i], levels = factorLevels[[i]])}
}
df <- cbind(ownersIDs, df)
return(df)
}
)
asDataFrame(dataRec@analysisResults$leftEventData, owner = "Gap")
setMethod("asDataFrame",  "FactorsData",
function(self, owner)
{
owners <- sapply(self@factorsDataList, FUN = function(x) {x$owner})
ownerFactorsData <- self@factorsDataList[which(owners == owner)]
if (length(ownerFactorsData) == 0) {warning("Factor values are not set for this owner!"); return(NULL)}
factorsNames <- sapply(ownerFactorsData, FUN = function(x) {names(x$values)})
dim(factorsNames) <- prod(dim(factorsNames))
uniqueFactorsNames <- unique(factorsNames)
df <- lapply(uniqueFactorsNames, FUN = function(x)
{
res <- sapply(ownerFactorsData, FUN = function(y)
{
y$values[[which(names(y$values) == x)]]
})
names(res) <- NULL
return(res)
})
ownerIDs <- sapply(ownerFactorsData, FUN = function(x) {x$ownerID})
df <- append(list(ownerID = ownerIDs), df)
names(df) <- c("ownerID", uniqueFactorsNames)
return(data.frame(df, stringsAsFactors = F))
ownersIDs <- as.integer(unique(ownersFactors$ownerID))
varCnt <- length(factorsIDs)
factorNames <- sapply(factorsIDs, function(x) {getNameByFactorID(availableFactors,x)})
df <- list()
for (ownerID in ownersIDs)
{
ownerFactorsIDs <- ownersFactors$factorID[ownersFactors$ownerID == ownerID]
varPositions <- sapply(ownerFactorsIDs, function(x) which(factorsIDs == x))
values <- ownersFactors$value[which(ownersFactors$ownerID == ownerID)]
df <- rbind(df, c(rep(NA, varCnt)))
df[nrow(df), varPositions] <- values
}
df <- as.data.frame(df)
colnames(df) <- factorNames
factorTypes <- sapply(factorsIDs, function(x) {getTypeByFactorID(availableFactors,x)})
factorLevels <- sapply(factorsIDs, function(x) {getLevelsByFactorID(availableFactors,x)})
for (i in 1:length(df))
{
if (factorTypes[i] == "integer") {df[,i] <- as.integer(df[,i])}
if (factorTypes[i] == "numeric") {df[,i] <- as.numeric(df[,i])}
if (factorTypes[i] == "factor") {df[,i] <- factor(df[,i], levels = factorLevels[[i]])}
if (factorTypes[i] == "ordFactor") {df[,i] <- ordered(df[,i], levels = factorLevels[[i]])}
}
df <- cbind(ownersIDs, df)
return(df)
}
)
asDataFrame(dataRec@analysisResults$leftEventData, owner = "Gap")
asDataFrame(dataRec@analysisResults$leftEventData, owner = "Fixation")
head(asDataFrame(dataRec@analysisResults$leftEventData, owner = "Fixation"))
head(asDataFrame(dataRec@analysisResults$leftEventData, owner = "Saccade"))
str(asDataFrame(dataRec@analysisResults$leftEventData, owner = "Saccade"))
setMethod("asDataFrame",  "FactorsData",
function(self, owner)
{
owners <- sapply(self@factorsDataList, FUN = function(x) {x$owner})
ownerFactorsData <- self@factorsDataList[which(owners == owner)]
if (length(ownerFactorsData) == 0) {warning("Factor values are not set for this owner!"); return(NULL)}
factorsNames <- sapply(ownerFactorsData, FUN = function(x) {names(x$values)})
dim(factorsNames) <- prod(dim(factorsNames))
uniqueFactorsNames <- unique(factorsNames)
df <- lapply(uniqueFactorsNames, FUN = function(x)
{
res <- sapply(ownerFactorsData, FUN = function(y)
{
val <- y$values[[which(names(y$values) == x)]]
print(class(val))
val
})
names(res) <- NULL
return(res)
})
ownerIDs <- sapply(ownerFactorsData, FUN = function(x) {x$ownerID})
df <- append(list(ownerID = ownerIDs), df)
names(df) <- c("ownerID", uniqueFactorsNames)
return(data.frame(df, stringsAsFactors = F))
ownersIDs <- as.integer(unique(ownersFactors$ownerID))
varCnt <- length(factorsIDs)
factorNames <- sapply(factorsIDs, function(x) {getNameByFactorID(availableFactors,x)})
df <- list()
for (ownerID in ownersIDs)
{
ownerFactorsIDs <- ownersFactors$factorID[ownersFactors$ownerID == ownerID]
varPositions <- sapply(ownerFactorsIDs, function(x) which(factorsIDs == x))
values <- ownersFactors$value[which(ownersFactors$ownerID == ownerID)]
df <- rbind(df, c(rep(NA, varCnt)))
df[nrow(df), varPositions] <- values
}
df <- as.data.frame(df)
colnames(df) <- factorNames
factorTypes <- sapply(factorsIDs, function(x) {getTypeByFactorID(availableFactors,x)})
factorLevels <- sapply(factorsIDs, function(x) {getLevelsByFactorID(availableFactors,x)})
for (i in 1:length(df))
{
if (factorTypes[i] == "integer") {df[,i] <- as.integer(df[,i])}
if (factorTypes[i] == "numeric") {df[,i] <- as.numeric(df[,i])}
if (factorTypes[i] == "factor") {df[,i] <- factor(df[,i], levels = factorLevels[[i]])}
if (factorTypes[i] == "ordFactor") {df[,i] <- ordered(df[,i], levels = factorLevels[[i]])}
}
df <- cbind(ownersIDs, df)
return(df)
}
)
str(asDataFrame(dataRec@analysisResults$leftEventData, owner = "Saccade"))
str(asDataFrame(dataRec@analysisResults$leftEventData, owner = "Gap"))
str(asDataFrame(dataRec@analysisResults$leftEventData[1:10], owner = "Fixation"))
str(asDataFrame(dataRec@analysisResults$leftEventData@factorsDataList[1:10], owner = "Fixation"))
str(asDataFrame(dataRec@analysisResults$leftEventData, owner = "Fixation"))
setMethod("asDataFrame",  "FactorsData",
function(self, owner)
{
owners <- sapply(self@factorsDataList, FUN = function(x) {x$owner})
ownerFactorsData <- self@factorsDataList[which(owners == owner)]
if (length(ownerFactorsData) == 0) {warning("Factor values are not set for this owner!"); return(NULL)}
factorsNames <- sapply(ownerFactorsData, FUN = function(x) {names(x$values)})
dim(factorsNames) <- prod(dim(factorsNames))
uniqueFactorsNames <- unique(factorsNames)
df <- lapply(uniqueFactorsNames, FUN = function(x)
{
res <- sapply(ownerFactorsData, FUN = function(y)
{
val <- y$values[[which(names(y$values) == x)]]
if (class(val) == "factor") {print("Yo")}
val
})
names(res) <- NULL
return(res)
})
ownerIDs <- sapply(ownerFactorsData, FUN = function(x) {x$ownerID})
df <- append(list(ownerID = ownerIDs), df)
names(df) <- c("ownerID", uniqueFactorsNames)
return(data.frame(df, stringsAsFactors = F))
ownersIDs <- as.integer(unique(ownersFactors$ownerID))
varCnt <- length(factorsIDs)
factorNames <- sapply(factorsIDs, function(x) {getNameByFactorID(availableFactors,x)})
df <- list()
for (ownerID in ownersIDs)
{
ownerFactorsIDs <- ownersFactors$factorID[ownersFactors$ownerID == ownerID]
varPositions <- sapply(ownerFactorsIDs, function(x) which(factorsIDs == x))
values <- ownersFactors$value[which(ownersFactors$ownerID == ownerID)]
df <- rbind(df, c(rep(NA, varCnt)))
df[nrow(df), varPositions] <- values
}
df <- as.data.frame(df)
colnames(df) <- factorNames
factorTypes <- sapply(factorsIDs, function(x) {getTypeByFactorID(availableFactors,x)})
factorLevels <- sapply(factorsIDs, function(x) {getLevelsByFactorID(availableFactors,x)})
for (i in 1:length(df))
{
if (factorTypes[i] == "integer") {df[,i] <- as.integer(df[,i])}
if (factorTypes[i] == "numeric") {df[,i] <- as.numeric(df[,i])}
if (factorTypes[i] == "factor") {df[,i] <- factor(df[,i], levels = factorLevels[[i]])}
if (factorTypes[i] == "ordFactor") {df[,i] <- ordered(df[,i], levels = factorLevels[[i]])}
}
df <- cbind(ownersIDs, df)
return(df)
}
)
str(asDataFrame(dataRec@analysisResults$leftEventData, owner = "Fixation"))
source('Functions\\DataRecordSubFunctions.R', local = T)
source('Functions\\EventGroupSubFunctions.R', local = T)
source('CoreSubFunctionsInit.R', local = T)
str(asDataFrame(dataRec@analysisResults$leftEventData, owner = "Fixation"))
source("Functions\\eventAnalyzersNew.R", local = T)
Rprof("test.out")
dataRec <- eventAnalyzer(dataRec, analyzer)
Rprof(NULL)
summaryRprof("test.out")
str(asDataFrame(dataRec@analysisResults$leftEventData, owner = "Fixation"))
str(asDataFrame(dataRec@analysisResults$leftEventData, owner = "Fixation"))
class(list(a = "v", b = 1))
class(unlistlist((a = "v", b = 1)))
class(unlist(list((a = "v", b = 1)))
class(unlist(list((a = "v", b = 1))))
class(unlist(list(a = "v", b = 1)))
str(asDataFrame(dataRec@analysisResults$leftEventData, owner = "Fixation"))
dataRec <- eventAnalyzer(dataRec, analyzer)
source("Functions\\eventAnalyzersNew.R", local = T)
Rprof("test.out")
dataRec <- eventAnalyzer(dataRec, analyzer)
folder <- "F:/Институт/Проекты/EyeTrackingPackage/Data/Test Data"
records <- new(Class = "RawDataRecords")
loader <- createLoader(name = "Standard Loader", fun = createRawDataRec,
settings = list(rawSettings = rawSett))
filesList = dir(path = folder, all.files = F, full.names = T, recursive = F),
rawRecords <- addRawDataRecords(self = records,
loader = loader)
dataF <- new(Class = "AvailableDataFields")
lporx = 10, lpory = 11, rporx = NA, rpory = NA,
dataF@availableFields <- list(time = 1, trial = 3, frame = NA, stimname = NA, smptype = 2,
lpupxsize = 6, lpupysize = 7, rpupxsize = NA, rpupysize = NA,
leftAdditionalFields = list(lrawx = 4, lrawy = 5), rightAdditionalFields = NA)
hKeys <- new(Class = "HeaderKeys")
conditions <- new(Class = "Conditions")
conditions@conditions$screenDistance <- 80
folder <- "F:/Институт/Проекты/EyeTrackingPackage/Data/Test Data"
records <- new(Class = "RawDataRecords")
loader <- createLoader(name = "Standard Loader", fun = createRawDataRec,
settings = list(rawSettings = rawSett))
rawRecords <- addRawDataRecords(self = records,
filesList = dir(path = folder, all.files = F, full.names = T, recursive = F),
loader = loader)
dataF <- new(Class = "AvailableDataFields")
dataF@availableFields <- list(time = 1, trial = 3, frame = NA, stimname = NA, smptype = 2,
lporx = 10, lpory = 11, rporx = NA, rpory = NA,
lpupxsize = 6, lpupysize = 7, rpupxsize = NA, rpupysize = NA,
leftAdditionalFields = list(lrawx = 4, lrawy = 5), rightAdditionalFields = NA)
hKeys <- new(Class = "HeaderKeys")
conditions <- new(Class = "Conditions")
conditions@conditions$screenDistance <- 80
conditions@conditions$screenResolution <- c(1280, 1024)
conditions@conditions$screenSize <- c(33.7, 27)
conditions@conditions$timeUnits <- 1E-6
parser <- createParser(name = "Core Parser", fun = coreParser,
settings = list(dataFields = dataF,
headerKeys = hKeys,
sampleKey = "SMP",
sep = "\t",
conditions = conditions))
rec <- parseDataRecord(self = rawRecords@rawDataRecordsList$rawDataRecords[[1]], parser = parser)
dataRec <- new(Class = "DataRecord", expID = 1, subjectID = 1, trialID = 1, eyesDataObject = rec$eyesDataObjects[[1]])
# Event Detection test
smoother <- createSmoother("Standard", fun = coreSmoother, settings = list(subfun = medianFilt, fl = 33))
filter <- createFilter(name = "Standard", fun = coreFilter, settings = list(subfun = standardFilter,
screenResolution = conditions@conditions$screenResolution,
interpolate = F))
detector <- createDetector("Standard", fun = coreDetector, settings = list(subfun = IVT,
postProcess = F,
VT = 15,
velType = "finDiff",
sampleRate = 500,
fl = 33,
angular = T,
screenDistance = 100,
screenResolution = c(1280, 1024),
screenSize = c(33.7, 27),
MaxTBetFix = 0.075,
MaxDistBetFix = 0.5,
minFixLen = 0.05,
maxGapLen = 0.07,
maxVel = 1000,
maxAccel = 1000000,
classifyGaps = F))
res <- detectEvents(dataRec, filter, smoother, detector)
dataRec@eyesDataObject@leftFilterMarkers <- res@eyesDataObject@leftFilterMarkers
dataRec@eyesDataObject@rightFilterMarkers <- res@eyesDataObject@rightFilterMarkers
dataRec@eyesDataObject@leftEventMarkers <- res@eyesDataObject@leftEventMarkers
dataRec@eyesDataObject@rightEventMarkers <- res@eyesDataObject@rightEventMarkers
# Event Analysis test
subFuns <- getSubfunctions(self = subFunctions, operation = "Event Analysis")
sfToApply <- subFuns@subFunctionsList$subFunctions
analyzer <- createAnalyzer(name = "Standard", fun = coreEventAnalyzer,
settings = list(subFunctions = sfToApply))
source("Functions\\eventAnalyzersNew.R", local = T)
Rprof("test.out")
dataRec <- eventAnalyzer(dataRec, analyzer)
Rprof(NULL)
summaryRprof("test.out")
str(asDataFrame(dataRec@analysisResults$leftEventData, owner = "Fixation"))
source("Functions\\eventAnalyzersNew.R", local = T)
Rprof("test.out")
dataRec <- eventAnalyzer(dataRec, analyzer)
Rprof(NULL)
summaryRprof("test.out")
dataRec@eyesDataObject@leftFilterMarkers <- res@eyesDataObject@leftFilterMarkers
dataRec@eyesDataObject@rightFilterMarkers <- res@eyesDataObject@rightFilterMarkers
dataRec@eyesDataObject@leftEventMarkers <- res@eyesDataObject@leftEventMarkers
dataRec@eyesDataObject@rightEventMarkers <- res@eyesDataObject@rightEventMarkers
# Event Analysis test
subFuns <- getSubfunctions(self = subFunctions, operation = "Event Analysis")
sfToApply <- subFuns@subFunctionsList$subFunctions
analyzer <- createAnalyzer(name = "Standard", fun = coreEventAnalyzer,
settings = list(subFunctions = sfToApply))
source("Functions\\eventAnalyzersNew.R", local = T)
Rprof("test.out")
dataRec <- eventAnalyzer(dataRec, analyzer)
Rprof(NULL)
summaryRprof("test.out")
records
rec
setwd("F:/Институт/Проекты/EyeTrackingPackage/Git/EyeTrackingProject/Shiny")
source("Functions\\miscFunctions.R", local = T)
source("Functions\\dataLoaders.R", local = T)
source("Classes\\optionsAndSettingsClasses.R", local = T)
source("Classes\\baseEyeDataClasses.R", local = T)
source("Classes\\baseClasses.R", local = T)
source("Classes\\listsAndTablesClasses.R", local = T)
source("Functions\\dataParsers.R", local = T)
source("Functions\\filters.R", local = T)
source("Functions\\smoothers.R", local = T)
source("Functions\\detectors.R", local = T)
source("Functions\\eventAnalyzersNew.R", local = T)
source("Functions\\estimatorsNew.R", local = T)
source("Methods\\Methods_v_1_7.R", local = T)
source('Functions\\DataRecordSubFunctions.R', local = T)
source('Functions\\EventGroupSubFunctions.R', local = T)
source('CoreSubFunctionsInit.R', local = T)
rawSett <- new(Class = "ReadSettings")
folder <- "F:/Институт/Проекты/EyeTrackingPackage/Data/Test Data"
records <- new(Class = "RawDataRecords")
loader <- createLoader(name = "Standard Loader", fun = createRawDataRec,
settings = list(rawSettings = rawSett))
rawRecords <- addRawDataRecords(self = records,
filesList = dir(path = folder, all.files = F, full.names = T, recursive = F),
loader = loader)
dataF <- new(Class = "AvailableDataFields")
dataF@availableFields <- list(time = 1, trial = 3, frame = NA, stimname = NA, smptype = 2,
lporx = 10, lpory = 11, rporx = NA, rpory = NA,
lpupxsize = 6, lpupysize = 7, rpupxsize = NA, rpupysize = NA,
leftAdditionalFields = list(lrawx = 4, lrawy = 5), rightAdditionalFields = NA)
hKeys <- new(Class = "HeaderKeys")
conditions <- new(Class = "Conditions")
conditions@conditions$screenDistance <- 80
conditions@conditions$screenResolution <- c(1280, 1024)
conditions@conditions$screenSize <- c(33.7, 27)
conditions@conditions$timeUnits <- 1E-6
parser <- createParser(name = "Core Parser", fun = coreParser,
settings = list(dataFields = dataF,
headerKeys = hKeys,
sampleKey = "SMP",
sep = "\t",
conditions = conditions))
rec <- parseDataRecord(self = rawRecords@rawDataRecordsList$rawDataRecords[[1]], parser = parser)
dataRec <- new(Class = "DataRecord", expID = 1, subjectID = 1, trialID = 1, eyesDataObject = rec$eyesDataObjects[[1]])
folder <- "F:/Институт/Проекты/EyeTrackingPackage/Data/TestData"
records <- new(Class = "RawDataRecords")
loader <- createLoader(name = "Standard Loader", fun = createRawDataRec,
settings = list(rawSettings = rawSett))
rawRecords <- addRawDataRecords(self = records,
filesList = dir(path = folder, all.files = F, full.names = T, recursive = F),
loader = loader)
dataF <- new(Class = "AvailableDataFields")
dataF@availableFields <- list(time = 1, trial = 3, frame = NA, stimname = NA, smptype = 2,
lporx = 10, lpory = 11, rporx = NA, rpory = NA,
lpupxsize = 6, lpupysize = 7, rpupxsize = NA, rpupysize = NA,
leftAdditionalFields = list(lrawx = 4, lrawy = 5), rightAdditionalFields = NA)
hKeys <- new(Class = "HeaderKeys")
conditions <- new(Class = "Conditions")
conditions@conditions$screenDistance <- 80
conditions@conditions$screenResolution <- c(1280, 1024)
conditions@conditions$screenSize <- c(33.7, 27)
conditions@conditions$timeUnits <- 1E-6
parser <- createParser(name = "Core Parser", fun = coreParser,
settings = list(dataFields = dataF,
headerKeys = hKeys,
sampleKey = "SMP",
sep = "\t",
conditions = conditions))
rec <- parseDataRecord(self = rawRecords@rawDataRecordsList$rawDataRecords[[1]], parser = parser)
dataRec <- new(Class = "DataRecord", expID = 1, subjectID = 1, trialID = 1, eyesDataObject = rec$eyesDataObjects[[1]])
# Event Detection test
smoother <- createSmoother("Standard", fun = coreSmoother, settings = list(subfun = medianFilt, fl = 33))
filter <- createFilter(name = "Standard", fun = coreFilter, settings = list(subfun = standardFilter,
screenResolution = conditions@conditions$screenResolution,
interpolate = F))
detector <- createDetector("Standard", fun = coreDetector, settings = list(subfun = IVT,
postProcess = F,
VT = 15,
velType = "finDiff",
sampleRate = 500,
fl = 33,
angular = T,
screenDistance = 100,
screenResolution = c(1280, 1024),
screenSize = c(33.7, 27),
MaxTBetFix = 0.075,
MaxDistBetFix = 0.5,
minFixLen = 0.05,
maxGapLen = 0.07,
maxVel = 1000,
maxAccel = 1000000,
classifyGaps = F))
res <- detectEvents(dataRec, filter, smoother, detector)
dataRec@eyesDataObject@leftFilterMarkers <- res@eyesDataObject@leftFilterMarkers
dataRec@eyesDataObject@rightFilterMarkers <- res@eyesDataObject@rightFilterMarkers
dataRec@eyesDataObject@leftEventMarkers <- res@eyesDataObject@leftEventMarkers
dataRec@eyesDataObject@rightEventMarkers <- res@eyesDataObject@rightEventMarkers
# Event Analysis test
subFuns <- getSubfunctions(self = subFunctions, operation = "Event Analysis")
sfToApply <- subFuns@subFunctionsList$subFunctions
analyzer <- createAnalyzer(name = "Standard", fun = coreEventAnalyzer,
settings = list(subFunctions = sfToApply))
source("Functions\\eventAnalyzersNew.R", local = T)
Rprof("test.out")
dataRec <- eventAnalyzer(dataRec, analyzer)
Rprof(NULL)
summaryRprof("test.out")
str(asDataFrame(dataRec@analysisResults$leftEventData, owner = "Fixation"))
# Estimators test
dataRec@statistics$left <- list()
dataRec@statistics$right <- list()
source('Functions\\DataRecordSubFunctions.R', local = T)
source('CoreSubFunctionsInit.R', local = T)
source("Functions\\estimatorsNew.R", local = T)
estimator <- createEstimator(name = "Standard", fun = coreEstimator,
settings = list(subFunctions = subFunctions@subFunctionsList$subFunctions))
dataRec <- estimateParams(self = dataRec, estimator = estimator)
dataRec@statistics$left
class(dataRec@statistics$left)
sapply(dataRec@statistics$left, FUN = function(x) class(x))
source("Functions\\eventAnalyzersNew.R", local = T)
Rprof("test.out")
dataRec <- eventAnalyzer(dataRec, analyzer)
Rprof(NULL)
summaryRprof("test.out")
source("Functions\\eventAnalyzersNew.R", local = T)
Rprof("test.out")
dataRec <- eventAnalyzer(dataRec, analyzer)
Rprof(NULL)
summaryRprof("test.out")
ataRec@statistics$left <- list()
dataRec@statistics$right <- list()
source('Functions\\DataRecordSubFunctions.R', local = T)
source('CoreSubFunctionsInit.R', local = T)
source("Functions\\estimatorsNew.R", local = T)
estimator <- createEstimator(name = "Standard", fun = coreEstimator,
settings = list(subFunctions = subFunctions@subFunctionsList$subFunctions))
dataRec <- estimateParams(self = dataRec, estimator = estimator)
dataRec@statistics$left
dataRec@statistics$right
files
library(data.table)
library(signal)
library(shiny)
library(shinydashboard)
library(devtools)
library(DT)
library(htmlwidgets)
library(D3TableFilter)
# options(shiny.maxRequestSize = 1000*1024^2)
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
data.frame(Filename = character())
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
