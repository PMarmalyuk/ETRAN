runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
data.frame(fileNames = NA)[-1,]
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
data.frame(fileNames = NA)[-1,]
class(data.frame(fileNames = NA)[-1,])
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
setGeneric("addRawDataRecords", function(self, filesList, loader){standardGeneric("addRawDataRecords")})
setMethod("addRawDataRecords",  "RawDataRecords",
function(self, filesList, loader)
{
fun <- loader@fun
settings <- loader@settings
newRawDataRecords <- lapply(filesList, FUN = fun, settings = settings)
self@rawDataRecordsList$rawDataRecords <- c(self@rawDataRecordsList$rawDataRecords, newRawDataRecords)
return(self)
}
)
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
read.csv("F:\\Институт\\Проекты\\EyeTrackingPackage\\Data\\TestData/Marmalyuk_Yuriev_problem_solving_Budanov_gr3_Psy_1241_Trial001 Samples.txt")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
setClass("Loaders",
representation(loadersList = "list"),
prototype(loadersList = list(ids = list(1), loaders = list(new(Class = "Loader"))))
)
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
as.character(mean)
a <- list(b = 10, d = 11)
as.character(a)
as.character(quote(a))
as.character(mean)
as.character(quote(mean))
setMethod("asDataFrame",  "Loaders",
function(self)
{
ids <- self@loadersList$ids
names <- lapply(self@loadersList$loaders, FUN = function(x) {x@name})
funs <- lapply(self@loadersList$loaders, FUN = function(x) {as.character(quote(x@fun))})
return(data.frame(id = ids, name = names, fun = funs))
}
)
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
loaders
cvz <- mean
quote(cvz)
match.call()[2])
match.call()[2]
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
setMethod("asDataFrame",  "Loaders",
function(self)
{
ids <- self@loadersList$ids
names <- lapply(self@loadersList$loaders, FUN = function(x) {x@name})
df <- data.frame(ids = ids, names = names, stringsAsFactors = F)
print(df)
return(df)
}
)
asDataFrame(loaders)
loaders
asDataFrame(loaders)
colnames(df) <- c("Id", "Name")
setMethod("asDataFrame",  "Loaders",
function(self)
{
ids <- self@loadersList$ids
names <- lapply(self@loadersList$loaders, FUN = function(x) {x@name})
df <- data.frame(ids = ids, names = names, stringsAsFactors = F)
colnames(df) <- c("Id", "Name")
print(df)
return(df)
}
)
asDataFrame(loaders)
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
deparse(body(loaders@loadersList$loaders[[1]]))
deparse(body(loaders@loadersList$loaders@fun))
deparse(body(loaders@loadersList$loaders$fun))
deparse(body(loaders@loadersList$loaders))
loaders@loadersList$loaders
deparse(body(loaders@loadersList$loaders[[1]]@fun))
deparse(body(loaders@loadersList$loaders[[1]]@fun))
deparse(body(loaders@loadersList$loaders[[1]]@settings))
deparse(loaders@loadersList$loaders[[1]]@settings)
deparse(loaders@loadersList$loaders[[1]]@settings$rawSettings)
deparse(loaders@loadersList$loaders[[1]]@settings$rawSettings@readSettings)
loaders@loadersList$loaders[[1]]@settings$rawSettings@readSettings
unlist(loaders@loadersList$loaders[[1]]@settings$rawSettings@readSettings)
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
?encoding
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
setClass("Loader",
representation(name = "character",
fun = "function"),
prototype(name = "Core Loader",
fun = createRawDataRec)
)
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
df <- data.frame(fileNames = NA, colnames = c("fileNames"))[-1,]
df
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
rawDataRecords
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
library(shiny)
library(shinyTable)
server <- function(input, output, session) {
rv <- reactiveValues(cachedTbl = NULL)
output$tbl <- renderHtable({
if (is.null(input$tbl)){
#fill table with 0
tbl <- matrix(0, nrow=3, ncol=3)
rv$cachedTbl <<- tbl
return(tbl)
} else{
rv$cachedTbl <<- input$tbl
return(input$tbl)
}
})
output$tblNonEdit <- renderTable({
#add dependence on button
input$actionButtonID
#isolate the cached table so it only responds when the button is pressed
isolate({
rv$cachedTbl
})
})
}
ui <- shinyUI(pageWithSidebar(
headerPanel("shinyTable with actionButton to apply changes"),
sidebarPanel(
helpText(HTML("A simple editable matrix with a functioning update button.
Using actionButton not submitButton.
Make changes to the upper table, press the button and they will appear in the lower.
<p>Created using <a href = \"http://github.com/trestletech/shinyTable\">shinyTable</a>."))
),
# Show the simple table
mainPanel(
#editable table
htable("tbl"),
#update button
actionButton("actionButtonID","apply table edits"),
#to show saved edits
tableOutput("tblNonEdit")
)
))
shinyApp(ui = ui, server = server)
runApp(system.file("examples/01-simple", package="shinyTable"))
runApp(system.file("03-click-input", package="shinyTable"))
runApp(system.file("examples/03-click-input", package="shinyTable"))
runApp(system.file("examples/02-matrix", package="shinyTable"))
runApp(system.file("examples/01-simple", package="shinyTable"))
shiny::runGitHub("shinyhandsontable-example","xiaodaigh")
runApp(system.file("examples/01-simple", package="shinyTable"))
runApp(server, ui)
library(shiny)
library(shinyTable)
#' Define server logic required to generate simple table
#' @author Jeff Allen \email{jeff@@trestletech.com}
#'
server <- shinyServer(function(input, output, session) {
cachedTbl <- NULL
validate <- function(tbl){
updateTableStyle(session, "tbl", "valid",
which(as.numeric(tbl$num2) < 50), 2)
updateTableStyle(session, "tbl", "warning",
which(as.numeric(tbl$num2) >= 50 &
as.numeric(tbl$num2) < 100), 2)
updateTableStyle(session, "tbl", "invalid",
which(as.numeric(tbl$num2) >= 100), 2)
}
output$tbl <- renderHtable({
if (is.null(input$tbl)){
rows <- 5
# Seed the element with some data initially
tbl <- data.frame(list(num1=1:rows,
num2=(1:rows)*20,
letter=LETTERS[1:(rows)]))
rownames(tbl) <- LETTERS[2:(rows+1)]
validate(tbl)
cachedTbl <<- tbl
return(tbl)
} else{
# Updates from client. The server has been made aware and can do some
# validation or updates here, then send back the revised table. In this
# case, we'll filter any number >= 100 in the first column.
tbl <- input$tbl
# Any non-numeric data should be replaced with the cached data.
tbl[is.na(as.integer(as.character(tbl[,1]))),1] <-
as.character(cachedTbl[is.na(as.integer(as.character(tbl[,1]))),1])
validate(tbl)
tbl[as.integer(as.character(tbl[,1])) >= 100,1] <- 99
cachedTbl <<- tbl
return(tbl)
}
})
})
library(shiny)
library(shinyTable)
#' Define UI for application that demonstrates a simple Handsontable
#' @author Jeff Allen \email{jeff@@trestletech.com}
ui <- shinyUI(pageWithSidebar(
# Application title
headerPanel("Simple Shiny Table!"),
sidebarPanel(
#sliderInput("slider", "Number of rows:", 1, 26, 5),
#HTML("<hr />"),
helpText(HTML("A simple table with validation. The first column must be a number and if it's >= 100, it will be assigned the value of 99. Other columns can be anything.
Additionally, the second column has server-side styling applied and will highlight as 'invalid' any value &gt;= 100, and will 'warn' on values &gt;= 50.
<p>Created using <a href = \"http://github.com/trestletech/shinyTable\">shinyTable</a>."))
),
# Show the simple table
mainPanel(
htable("tbl", colHeaders="provided")
)
))
runApp(server, ui)
library(shiny)
library(shinyTable)
#' Define server logic required to generate simple table
#' @author Jeff Allen \email{jeff@@trestletech.com}
#'
server <- shinyServer(function(input, output, session) {
cachedTbl <- NULL
output$tbl <- renderHtable({
if (is.null(input$tbl)){
rows <- 5
# Seed the element with some data initially
tbl <- data.frame(list(num1=1:rows,
num2=(1:rows)*20,
letter=LETTERS[1:(rows)]))
rownames(tbl) <- LETTERS[2:(rows+1)]
cachedTbl <<- tbl
return(tbl)
} else{
# Updates from client. The server has been made aware and can do some
# validation or updates here, then send back the revised table. In this
# case, we'll filter any number >= 100 in the first column.
tbl <- input$tbl
# Any non-numeric data should be replaced with the cached data.
tbl[is.na(as.integer(as.character(tbl[,1]))),1] <-
as.character(cachedTbl[is.na(as.integer(as.character(tbl[,1]))),1])
tbl[as.integer(as.character(tbl[,1])) >= 100,1] <- 99
cachedTbl <<- tbl
return(tbl)
}
})
})
#' Define UI for application that demonstrates a simple Handsontable
#' @author Jeff Allen \email{jeff@@trestletech.com}
ui <- shinyUI(pageWithSidebar(
# Application title
headerPanel("Simple Shiny Table!"),
sidebarPanel(
#sliderInput("slider", "Number of rows:", 1, 26, 5),
#HTML("<hr />"),
helpText(HTML("A simple table with validation. The first column must be a number and if it's >= 100, it will be assigned the value of 99. Other columns can be anything.
Additionally, the second column has server-side styling applied and will highlight as 'invalid' any value &gt;= 100, and will 'warn' on values &gt;= 50.
<p>Created using <a href = \"http://github.com/trestletech/shinyTable\">shinyTable</a>."))
),
# Show the simple table
mainPanel(
htable("tbl", colHeaders="provided")
)
))
runApp(server, ui)
library(shinyTable)
library(shiny)
server <- shinyServer(function(input, output, session) {
cachedTbl <- NULL
output$tbl <- renderHtable({
if (is.null(input$tbl)){
rows <- 5
# Seed the element with some data initially
tbl <- data.frame(list(num1=1:rows,
num2=(1:rows)*20,
letter=LETTERS[1:(rows)]))
rownames(tbl) <- LETTERS[2:(rows+1)]
cachedTbl <<- tbl
return(tbl)
} else{
# Updates from client. The server has been made aware and can do some
# validation or updates here, then send back the revised table. In this
# case, we'll filter any number >= 100 in the first column.
tbl <- input$tbl
# Any non-numeric data should be replaced with the cached data.
tbl[is.na(as.integer(as.character(tbl[,1]))),1] <-
as.character(cachedTbl[is.na(as.integer(as.character(tbl[,1]))),1])
tbl[as.integer(as.character(tbl[,1])) >= 100,1] <- 99
cachedTbl <<- tbl
return(tbl)
}
})
})
#' Define UI for application that demonstrates a simple Handsontable
#' @author Jeff Allen \email{jeff@@trestletech.com}
ui <- shinyUI(pageWithSidebar(
# Application title
headerPanel("Simple Shiny Table!"),
sidebarPanel(
#sliderInput("slider", "Number of rows:", 1, 26, 5),
#HTML("<hr />"),
helpText(HTML("A simple table with validation. The first column must be a number and if it's >= 100, it will be assigned the value of 99. Other columns can be anything.
Additionally, the second column has server-side styling applied and will highlight as 'invalid' any value &gt;= 100, and will 'warn' on values &gt;= 50.
<p>Created using <a href = \"http://github.com/trestletech/shinyTable\">shinyTable</a>."))
),
# Show the simple table
mainPanel(
htable("tbl", colHeaders="provided")
)
))
runApp(server, ui)
library(shiny)
library(shinyIncubator)
spreadsheetInput <- function(inputId){
tagList(
singleton(tags$head(tags$script(src = "http://handsontable.com/jquery.handsontable.js", type='text/javascript'))),
singleton(tags$head(tags$script(src = "http://handsontable.com/lib/bootstrap-typeahead.js", type='text/javascript'))),
singleton(tags$head(tags$script(src = "http://handsontable.com/lib/jQuery-contextMenu/jquery.contextMenu.js", type='text/javascript'))),
singleton(tags$head(tags$script(src = "http://handsontable.com/lib/jQuery-contextMenu/jquery.ui.position.js", type='text/javascript'))),
singleton(tags$head(tags$script(src = "shiny-handsontable.js", type='text/javascript'))),
singleton(tags$head(tags$link(rel="stylesheet", type="text/css", href="http://handsontable.com/lib/jQuery-contextMenu/jquery.contextMenu.css"))),
singleton(tags$head(tags$link(rel="stylesheet", type="text/css", href="http://handsontable.com/jquery.handsontable.css"))),
tags$body(
tags$div(id=inputId, class="handsonTable-output"),
br()
)
)
}
shinyUI(pageWithSidebar(
headerPanel("Title"),
sidebarPanel(
spreadsheetInput("example")
),
mainPanel(
tableOutput(outputId="result")
)
))
runApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
spreadsheetInput <- function(inputId){
tagList(
singleton(tags$head(tags$script(src = "http://handsontable.com/jquery.handsontable.js", type='text/javascript'))),
singleton(tags$head(tags$script(src = "http://handsontable.com/lib/bootstrap-typeahead.js", type='text/javascript'))),
singleton(tags$head(tags$script(src = "http://handsontable.com/lib/jQuery-contextMenu/jquery.contextMenu.js", type='text/javascript'))),
singleton(tags$head(tags$script(src = "http://handsontable.com/lib/jQuery-contextMenu/jquery.ui.position.js", type='text/javascript'))),
singleton(tags$head(tags$script(src = "shiny-handsontable.js", type='text/javascript'))),
singleton(tags$head(tags$link(rel="stylesheet", type="text/css", href="http://handsontable.com/lib/jQuery-contextMenu/jquery.contextMenu.css"))),
singleton(tags$head(tags$link(rel="stylesheet", type="text/css", href="http://handsontable.com/jquery.handsontable.css"))),
tags$body(
tags$div(id=inputId, class="handsonTable-output"),
br()
)
)
}
ui <- shinyUI(pageWithSidebar(
headerPanel("Title"),
sidebarPanel(
spreadsheetInput("example")
),
mainPanel(
tableOutput(outputId="result")
)
))
library(RJSONIO)
library(plyr)
jsonToList <- function(json) {
jsonAsList <- fromJSON(json, simplify = StrictCharacter, nullValue = "")
return(jsonAsList)
}
jsonToDataFrame <- function(json) {
jsonAsList <- jsonToList(json)
jsonAsDataFrame <- ldply(jsonAsList,function(x) as.data.frame(t(unlist(as.numeric(x)))))
return(jsonAsDataFrame)
}
# Minimal Custom
server <- shinyServer(function(input, output) {
data <- reactive({
if(input$example == "[]") {
return(cars)
} else {
return(jsonToDataFrame(input$example))
}
})
dataframe <- reactive({
dataSet <- data()
dataSet <- suppressWarnings(as.data.frame(sapply(dataSet, as.numeric)))
return(dataSet)
})
output$result <- renderTable({
dataframe()
})
output$example <- renderUI({
toJSON(as.data.frame(t(dataframe())), .withNames=FALSE)
})
})
shinyApp(ui = ui, server = server)
devtools::install_github("jrowen/rhandsontable")
DF = data.frame(val = 1:10, bool = TRUE, big = LETTERS[1:10],
small = letters[1:10],
dt = seq(from = Sys.Date(), by = "days", length.out = 10),
stringsAsFactors = F)
rhandsontable(DF, rowHeaders = NULL)
library(rhandsontable)
DF = data.frame(val = 1:10, bool = TRUE, big = LETTERS[1:10],
small = letters[1:10],
dt = seq(from = Sys.Date(), by = "days", length.out = 10),
stringsAsFactors = F)
rhandsontable(DF, rowHeaders = NULL)
rhandsontable('tbl')
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
helpMethodConditions
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
runApp("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Shiny")
