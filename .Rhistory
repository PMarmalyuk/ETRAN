transitions <- apply(evmarks, MARGIN = 1, function(x) {if (x[2] != x[1]) {1} else {0}})
group <- c(1,cumsum(transitions)+1)
events <- data.frame(t = t, x = x, y = y, evm = rawEventMarkers, gr = group)
save(events, "sequence.txt")
stop()
## 6.1
eventGroups <- split(events, group)
fixationGroups <- list()
saccadeGroups <- list()
lastFixPos <- c()
lastFixTime <- c()
for (gr in 2:length(eventGroups))
{
previousEvent <- eventGroups[[gr-1]]$evm[1]
currentEvent <- eventGroups[[gr]]$evm[1]
if (previousEvent == "Fixation" && currentEvent == "Saccade")
{
lastFixPos <- c(eventGroups[[gr-1]]$x[nrow(eventGroups[[gr-1]])], eventGroups[[gr-1]]$y[nrow(eventGroups[[gr-1]])])
lastFixTime <- eventGroups[[gr-1]]$t[nrow(eventGroups[[gr-1]])]
fixationGroup <- eventGroups[[gr-1]]
}
if (previousEvent == "Saccade" && currentEvent == "Fixation")
{
if (length(lastFixTime) != 0)
{
fixPos <- c(eventGroups[[gr]]$x[1], eventGroups[[gr]]$y[1])
fixTime <- eventGroups[[gr]]$t[1]
if (lastFixTime - fixTime <= MaxTBetFix)
{
if (!angular)
{
pxVel <- calcPxVel(t = c(lastFixTime, fixTime),
x = c(lastFixPos[1], fixPos[1]),
y = c(lastFixPos[2], fixPos[2]))
dist <- pxVel$dist
}
else
{
angVel <- calcAngVel(t = c(lastFixTime, fixTime),
x = c(lastFixPos[1], fixPos[1]),
y = c(lastFixPos[2], fixPos[2]),
screenDist,
screenDim,
screenSize)
dist <- angVel$dist
}
if (dist <= MaxDistBetFix)
{
saccadeGroup <- list()
fixationGroup <- rbind(fixationGroup, eventGroups[[gr]])
}
else
{
fixationGroups <- append(fixationGroups, list(fixationGroup))
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
else
{
fixationGroups <- append(fixationGroups, list(fixationGroup))
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
else
{
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
}
# 6.2 Deleting short fixations, grouping corresponding saccades
res <- list(fixations = fixationGroups, saccades = saccadeGroups)
return(res)
#return(NA)
# 7. Events' parameters estimation stage
# 8. Return eventMarkers and eventData objects
}
events <- IVT(t = t, x = x, y = y,
filterMarkers = filt, VT = 30, angular = T,
screenDist = 100, screenDim = c(1280, 1024), screenSize = c(33.7, 27),
MaxTBetFix = 0.075, MaxDistBetFix = 0.5)
IVT <- function(t, x, y, filterMarkers, VT, angular = F, screenDist, screenDim, screenSize, MaxTBetFix, MaxDistBetFix)
{
# 1. Velocities estimation
if (!angular)
{
vel <- calcPxVel(t, x, y)
}
else
{
vel <- calcAngVel(t, x, y, screenDist, screenDim, screenSize)
}
# 2. Classification stage: getting raw event markers
markers1 <- ifelse(x == 0 & y == 0, filterMarkers@markerNames$zeroes, filterMarkers@markerNames$ok)
if (!is.na(screenDim)[1])
{
markers2 <- ifelse(x > screenDim[1] | y > screenDim[2], filterMarkers@markerNames$outOfBounds, filterMarkers@markerNames$ok)
markers1[which(markers1 == filterMarkers@markerNames$ok)] <- markers2[which(markers1 == filterMarkers@markerNames$ok)]
}
gapMarkers <- ifelse(markers1 != filterMarkers@markerNames$ok, "GAP", "NOT GAP")
rawEventMarkers <- ifelse(gapMarkers[-length(gapMarkers)] == "GAP", "GAP", ifelse(vel$vels <= VT, "Fixation", "Saccade"))
#rawEventMarkers <- ifelse(vel$vels <= VT, "Fixation", "Saccade")
# 3. Post-processing stage
evmarks <- data.frame(firstEv = rawEventMarkers[-length(rawEventMarkers)], secondEv = rawEventMarkers[-1])
transitions <- apply(evmarks, MARGIN = 1, function(x) {if (x[2] != x[1]) {1} else {0}})
group <- c(1,cumsum(transitions)+1)
events <- data.frame(t = t[-length(t)], x = x[-length(t)], y = y[-length(t)], evm = rawEventMarkers, gr = group)
save(events, "sequence.txt")
stop()
## 6.1
eventGroups <- split(events, group)
fixationGroups <- list()
saccadeGroups <- list()
lastFixPos <- c()
lastFixTime <- c()
for (gr in 2:length(eventGroups))
{
previousEvent <- eventGroups[[gr-1]]$evm[1]
currentEvent <- eventGroups[[gr]]$evm[1]
if (previousEvent == "Fixation" && currentEvent == "Saccade")
{
lastFixPos <- c(eventGroups[[gr-1]]$x[nrow(eventGroups[[gr-1]])], eventGroups[[gr-1]]$y[nrow(eventGroups[[gr-1]])])
lastFixTime <- eventGroups[[gr-1]]$t[nrow(eventGroups[[gr-1]])]
fixationGroup <- eventGroups[[gr-1]]
}
if (previousEvent == "Saccade" && currentEvent == "Fixation")
{
if (length(lastFixTime) != 0)
{
fixPos <- c(eventGroups[[gr]]$x[1], eventGroups[[gr]]$y[1])
fixTime <- eventGroups[[gr]]$t[1]
if (lastFixTime - fixTime <= MaxTBetFix)
{
if (!angular)
{
pxVel <- calcPxVel(t = c(lastFixTime, fixTime),
x = c(lastFixPos[1], fixPos[1]),
y = c(lastFixPos[2], fixPos[2]))
dist <- pxVel$dist
}
else
{
angVel <- calcAngVel(t = c(lastFixTime, fixTime),
x = c(lastFixPos[1], fixPos[1]),
y = c(lastFixPos[2], fixPos[2]),
screenDist,
screenDim,
screenSize)
dist <- angVel$dist
}
if (dist <= MaxDistBetFix)
{
saccadeGroup <- list()
fixationGroup <- rbind(fixationGroup, eventGroups[[gr]])
}
else
{
fixationGroups <- append(fixationGroups, list(fixationGroup))
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
else
{
fixationGroups <- append(fixationGroups, list(fixationGroup))
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
else
{
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
}
# 6.2 Deleting short fixations, grouping corresponding saccades
res <- list(fixations = fixationGroups, saccades = saccadeGroups)
return(res)
#return(NA)
# 7. Events' parameters estimation stage
# 8. Return eventMarkers and eventData objects
}
events <- IVT(t = t, x = x, y = y,
filterMarkers = filt, VT = 30, angular = T,
screenDist = 100, screenDim = c(1280, 1024), screenSize = c(33.7, 27),
MaxTBetFix = 0.075, MaxDistBetFix = 0.5)
IVT <- function(t, x, y, filterMarkers, VT, angular = F, screenDist, screenDim, screenSize, MaxTBetFix, MaxDistBetFix)
{
# 1. Velocities estimation
if (!angular)
{
vel <- calcPxVel(t, x, y)
}
else
{
vel <- calcAngVel(t, x, y, screenDist, screenDim, screenSize)
}
# 2. Classification stage: getting raw event markers
markers1 <- ifelse(x == 0 & y == 0, filterMarkers@markerNames$zeroes, filterMarkers@markerNames$ok)
if (!is.na(screenDim)[1])
{
markers2 <- ifelse(x > screenDim[1] | y > screenDim[2], filterMarkers@markerNames$outOfBounds, filterMarkers@markerNames$ok)
markers1[which(markers1 == filterMarkers@markerNames$ok)] <- markers2[which(markers1 == filterMarkers@markerNames$ok)]
}
gapMarkers <- ifelse(markers1 != filterMarkers@markerNames$ok, "GAP", "NOT GAP")
rawEventMarkers <- ifelse(gapMarkers[-length(gapMarkers)] == "GAP", "GAP", ifelse(vel$vels <= VT, "Fixation", "Saccade"))
#rawEventMarkers <- ifelse(vel$vels <= VT, "Fixation", "Saccade")
# 3. Post-processing stage
evmarks <- data.frame(firstEv = rawEventMarkers[-length(rawEventMarkers)], secondEv = rawEventMarkers[-1])
transitions <- apply(evmarks, MARGIN = 1, function(x) {if (x[2] != x[1]) {1} else {0}})
group <- c(1,cumsum(transitions)+1)
events <- data.frame(t = t[-length(t)], x = x[-length(t)], y = y[-length(t)], evm = rawEventMarkers, gr = group)
setwd("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject")
save(events, "sequence.txt")
stop()
## 6.1
eventGroups <- split(events, group)
fixationGroups <- list()
saccadeGroups <- list()
lastFixPos <- c()
lastFixTime <- c()
for (gr in 2:length(eventGroups))
{
previousEvent <- eventGroups[[gr-1]]$evm[1]
currentEvent <- eventGroups[[gr]]$evm[1]
if (previousEvent == "Fixation" && currentEvent == "Saccade")
{
lastFixPos <- c(eventGroups[[gr-1]]$x[nrow(eventGroups[[gr-1]])], eventGroups[[gr-1]]$y[nrow(eventGroups[[gr-1]])])
lastFixTime <- eventGroups[[gr-1]]$t[nrow(eventGroups[[gr-1]])]
fixationGroup <- eventGroups[[gr-1]]
}
if (previousEvent == "Saccade" && currentEvent == "Fixation")
{
if (length(lastFixTime) != 0)
{
fixPos <- c(eventGroups[[gr]]$x[1], eventGroups[[gr]]$y[1])
fixTime <- eventGroups[[gr]]$t[1]
if (lastFixTime - fixTime <= MaxTBetFix)
{
if (!angular)
{
pxVel <- calcPxVel(t = c(lastFixTime, fixTime),
x = c(lastFixPos[1], fixPos[1]),
y = c(lastFixPos[2], fixPos[2]))
dist <- pxVel$dist
}
else
{
angVel <- calcAngVel(t = c(lastFixTime, fixTime),
x = c(lastFixPos[1], fixPos[1]),
y = c(lastFixPos[2], fixPos[2]),
screenDist,
screenDim,
screenSize)
dist <- angVel$dist
}
if (dist <= MaxDistBetFix)
{
saccadeGroup <- list()
fixationGroup <- rbind(fixationGroup, eventGroups[[gr]])
}
else
{
fixationGroups <- append(fixationGroups, list(fixationGroup))
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
else
{
fixationGroups <- append(fixationGroups, list(fixationGroup))
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
else
{
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
}
# 6.2 Deleting short fixations, grouping corresponding saccades
res <- list(fixations = fixationGroups, saccades = saccadeGroups)
return(res)
#return(NA)
# 7. Events' parameters estimation stage
# 8. Return eventMarkers and eventData objects
}
events <- IVT(t = t, x = x, y = y,
filterMarkers = filt, VT = 30, angular = T,
screenDist = 100, screenDim = c(1280, 1024), screenSize = c(33.7, 27),
MaxTBetFix = 0.075, MaxDistBetFix = 0.5)
?save
IVT <- function(t, x, y, filterMarkers, VT, angular = F, screenDist, screenDim, screenSize, MaxTBetFix, MaxDistBetFix)
{
# 1. Velocities estimation
if (!angular)
{
vel <- calcPxVel(t, x, y)
}
else
{
vel <- calcAngVel(t, x, y, screenDist, screenDim, screenSize)
}
# 2. Classification stage: getting raw event markers
markers1 <- ifelse(x == 0 & y == 0, filterMarkers@markerNames$zeroes, filterMarkers@markerNames$ok)
if (!is.na(screenDim)[1])
{
markers2 <- ifelse(x > screenDim[1] | y > screenDim[2], filterMarkers@markerNames$outOfBounds, filterMarkers@markerNames$ok)
markers1[which(markers1 == filterMarkers@markerNames$ok)] <- markers2[which(markers1 == filterMarkers@markerNames$ok)]
}
gapMarkers <- ifelse(markers1 != filterMarkers@markerNames$ok, "GAP", "NOT GAP")
rawEventMarkers <- ifelse(gapMarkers[-length(gapMarkers)] == "GAP", "GAP", ifelse(vel$vels <= VT, "Fixation", "Saccade"))
#rawEventMarkers <- ifelse(vel$vels <= VT, "Fixation", "Saccade")
# 3. Post-processing stage
evmarks <- data.frame(firstEv = rawEventMarkers[-length(rawEventMarkers)], secondEv = rawEventMarkers[-1])
transitions <- apply(evmarks, MARGIN = 1, function(x) {if (x[2] != x[1]) {1} else {0}})
group <- c(1,cumsum(transitions)+1)
events <- data.frame(t = t[-length(t)], x = x[-length(t)], y = y[-length(t)], evm = rawEventMarkers, gr = group)
setwd("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject")
save(events, file = "sequence.txt")
stop()
## 6.1
eventGroups <- split(events, group)
fixationGroups <- list()
saccadeGroups <- list()
lastFixPos <- c()
lastFixTime <- c()
for (gr in 2:length(eventGroups))
{
previousEvent <- eventGroups[[gr-1]]$evm[1]
currentEvent <- eventGroups[[gr]]$evm[1]
if (previousEvent == "Fixation" && currentEvent == "Saccade")
{
lastFixPos <- c(eventGroups[[gr-1]]$x[nrow(eventGroups[[gr-1]])], eventGroups[[gr-1]]$y[nrow(eventGroups[[gr-1]])])
lastFixTime <- eventGroups[[gr-1]]$t[nrow(eventGroups[[gr-1]])]
fixationGroup <- eventGroups[[gr-1]]
}
if (previousEvent == "Saccade" && currentEvent == "Fixation")
{
if (length(lastFixTime) != 0)
{
fixPos <- c(eventGroups[[gr]]$x[1], eventGroups[[gr]]$y[1])
fixTime <- eventGroups[[gr]]$t[1]
if (lastFixTime - fixTime <= MaxTBetFix)
{
if (!angular)
{
pxVel <- calcPxVel(t = c(lastFixTime, fixTime),
x = c(lastFixPos[1], fixPos[1]),
y = c(lastFixPos[2], fixPos[2]))
dist <- pxVel$dist
}
else
{
angVel <- calcAngVel(t = c(lastFixTime, fixTime),
x = c(lastFixPos[1], fixPos[1]),
y = c(lastFixPos[2], fixPos[2]),
screenDist,
screenDim,
screenSize)
dist <- angVel$dist
}
if (dist <= MaxDistBetFix)
{
saccadeGroup <- list()
fixationGroup <- rbind(fixationGroup, eventGroups[[gr]])
}
else
{
fixationGroups <- append(fixationGroups, list(fixationGroup))
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
else
{
fixationGroups <- append(fixationGroups, list(fixationGroup))
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
else
{
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
}
# 6.2 Deleting short fixations, grouping corresponding saccades
res <- list(fixations = fixationGroups, saccades = saccadeGroups)
return(res)
#return(NA)
# 7. Events' parameters estimation stage
# 8. Return eventMarkers and eventData objects
}
events <- IVT(t = t, x = x, y = y,
filterMarkers = filt, VT = 30, angular = T,
screenDist = 100, screenDim = c(1280, 1024), screenSize = c(33.7, 27),
MaxTBetFix = 0.075, MaxDistBetFix = 0.5)
?write.csv
IVT <- function(t, x, y, filterMarkers, VT, angular = F, screenDist, screenDim, screenSize, MaxTBetFix, MaxDistBetFix)
{
# 1. Velocities estimation
if (!angular)
{
vel <- calcPxVel(t, x, y)
}
else
{
vel <- calcAngVel(t, x, y, screenDist, screenDim, screenSize)
}
# 2. Classification stage: getting raw event markers
markers1 <- ifelse(x == 0 & y == 0, filterMarkers@markerNames$zeroes, filterMarkers@markerNames$ok)
if (!is.na(screenDim)[1])
{
markers2 <- ifelse(x > screenDim[1] | y > screenDim[2], filterMarkers@markerNames$outOfBounds, filterMarkers@markerNames$ok)
markers1[which(markers1 == filterMarkers@markerNames$ok)] <- markers2[which(markers1 == filterMarkers@markerNames$ok)]
}
gapMarkers <- ifelse(markers1 != filterMarkers@markerNames$ok, "GAP", "NOT GAP")
rawEventMarkers <- ifelse(gapMarkers[-length(gapMarkers)] == "GAP", "GAP", ifelse(vel$vels <= VT, "Fixation", "Saccade"))
#rawEventMarkers <- ifelse(vel$vels <= VT, "Fixation", "Saccade")
# 3. Post-processing stage
evmarks <- data.frame(firstEv = rawEventMarkers[-length(rawEventMarkers)], secondEv = rawEventMarkers[-1])
transitions <- apply(evmarks, MARGIN = 1, function(x) {if (x[2] != x[1]) {1} else {0}})
group <- c(1,cumsum(transitions)+1)
events <- data.frame(t = t[-length(t)], x = x[-length(t)], y = y[-length(t)], evm = rawEventMarkers, gr = group)
setwd("F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject")
write.csv(events, file = "sequence.txt")
stop()
## 6.1
eventGroups <- split(events, group)
fixationGroups <- list()
saccadeGroups <- list()
lastFixPos <- c()
lastFixTime <- c()
for (gr in 2:length(eventGroups))
{
previousEvent <- eventGroups[[gr-1]]$evm[1]
currentEvent <- eventGroups[[gr]]$evm[1]
if (previousEvent == "Fixation" && currentEvent == "Saccade")
{
lastFixPos <- c(eventGroups[[gr-1]]$x[nrow(eventGroups[[gr-1]])], eventGroups[[gr-1]]$y[nrow(eventGroups[[gr-1]])])
lastFixTime <- eventGroups[[gr-1]]$t[nrow(eventGroups[[gr-1]])]
fixationGroup <- eventGroups[[gr-1]]
}
if (previousEvent == "Saccade" && currentEvent == "Fixation")
{
if (length(lastFixTime) != 0)
{
fixPos <- c(eventGroups[[gr]]$x[1], eventGroups[[gr]]$y[1])
fixTime <- eventGroups[[gr]]$t[1]
if (lastFixTime - fixTime <= MaxTBetFix)
{
if (!angular)
{
pxVel <- calcPxVel(t = c(lastFixTime, fixTime),
x = c(lastFixPos[1], fixPos[1]),
y = c(lastFixPos[2], fixPos[2]))
dist <- pxVel$dist
}
else
{
angVel <- calcAngVel(t = c(lastFixTime, fixTime),
x = c(lastFixPos[1], fixPos[1]),
y = c(lastFixPos[2], fixPos[2]),
screenDist,
screenDim,
screenSize)
dist <- angVel$dist
}
if (dist <= MaxDistBetFix)
{
saccadeGroup <- list()
fixationGroup <- rbind(fixationGroup, eventGroups[[gr]])
}
else
{
fixationGroups <- append(fixationGroups, list(fixationGroup))
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
else
{
fixationGroups <- append(fixationGroups, list(fixationGroup))
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
else
{
saccadeGroups <- append(saccadeGroups, eventGroups[gr-1])
fixationGroup <- eventGroups[[gr]]
}
}
}
# 6.2 Deleting short fixations, grouping corresponding saccades
res <- list(fixations = fixationGroups, saccades = saccadeGroups)
return(res)
#return(NA)
# 7. Events' parameters estimation stage
# 8. Return eventMarkers and eventData objects
}
events <- IVT(t = t, x = x, y = y,
filterMarkers = filt, VT = 30, angular = T,
screenDist = 100, screenDim = c(1280, 1024), screenSize = c(33.7, 27),
MaxTBetFix = 0.075, MaxDistBetFix = 0.5)
