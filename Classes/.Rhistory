}
)
# Method adds a trial object into Trials list with ids and trials sublists
## Method doesn't increment ids because trials ids are obtained from datafiles
## (?) TO DO: method should check for duplicate trials
setMethod("addTrial",  "Trials",
function(self, trialObject)
{
id <- trialObject@id
expID <- trialObject@expID
self@trialsList$ids <- c(self@trialsList$ids, id)
self@trialsList$expIDs <- c(self@trialsList$expIDs, expID)
self@trialsList$trials <- c(self@trialsList$trials, trialObject)
return(self)
}
)
# Method returns a vector of subject codes
setMethod("getSubjectCodes", "Subjects",
function(self)
{
sapply(self@subjectsList$subjects, function(x) {return(x@code)})
}
)
# Method adds a subject object into the Subjects list with ids and subjects sublists
## Method prevents duplicating subject codes
setMethod("addSubject",  "Subjects",
function(self, subjectObject)
{
subjCnt <- length(self@subjectsList$ids)
if (subjCnt == 0)
{
self@subjectsList$ids <- 1
self@subjectsList$subjects <- list(subjectObject)
return(self)
}
if (subjectObject@code %in% getSubjectCodes(self))
{
stop(paste("The subject with code", subjectObject@code, "already exists!"))
}
id <- tail(self@subjectsList$ids, n = 1) + 1
self@subjectsList$ids <- c(self@subjectsList$ids, id)
self@subjectsList$subjects <- c(self@subjectsList$subjects, subjectObject)
return(self)
}
)
# Method adds a factor definition (object of the class Factor) into the availableFactors data frame
## Method prevents adding factors with duplicate names
setMethod("addFactorDefinition",  "AvailableFactors",
function(self, factor)
{
varName <- factor@varName
description <- factor@description
type <- factor@type
owner <- factor@owner
if (length(factor@levels) == 0) {levels = NA} else {levels <- factor@levels}
facCnt <- nrow(self@availableFactors)
if (facCnt == 0)
{
self@availableFactors <- data.frame(id = 1, varName = varName, description = description, type = type, levels = I(list(levels)), owner = owner, stringsAsFactors = F)
colnames(self@availableFactors) <- c("id", "varName", "description", "type", "levels", "owner")
return(self)
}
if (any(self@availableFactors$varName == varName) & any(self@availableFactors$owner == owner))
{
warning(paste("A factor with name", varName, "already exists for object class", owner))
} else
{
newFactorDef <- list(id = self@availableFactors[facCnt,1]+1, varName = varName, description = description, type = type, levels = I(list(levels)), owner = owner)
self@availableFactors <- rbind(self@availableFactors, newFactorDef)
}
return(self)
}
)
# Method adds a Stimulus object into the Stimuli list with ids and stimuli sublists
## TO DO: method should prevent duplicates in Stimuli
setMethod("addStimulus",  "Stimuli",
function(self, stimulusObject)
{
stimCnt <- length(self@stimuliList$ids)
if (stimCnt == 0)
{
self@stimuliList$ids <- 1
self@stimuliList$stimuli <- list(stimulusObject)
return(self)
}
id <- tail(self@stimuliList$ids, n = 1) + 1
self@stimuliList$ids <- c(self@stimuliList$ids, id)
self@stimuliList$stimuli <- c(self@stimuliList$stimuli, stimulusObject)
return(self)
}
)
# Method adds an AOI object into the AOISet object
## TO DO: method should prevent duplicates in AOISet
setMethod("addAOI",  "AOISet",
function(self, AOIObject)
{
if (length(self@AOIs) == 0)
{
self@AOIs <- AOIObject
}
self@AOIs <- c(self@AOIs, AOIObject)
return(self)
}
)
# Method adds an AOISet object with into the AOISet object
## TO DO: method should prevent duplicates in AOISet
setMethod("addAOISet",  "AOISets",
function(self, AOISetObject)
{
setsCnt <- length(self@AOISetsList$ids)
if (setsCnt == 0)
{
self@AOISetsList$ids <- 1
self@AOISetsList$AOISets <- list(AOISetObject)
return(self)
}
id <- tail(self@AOISetsList$ids, n = 1) + 1
self@AOISetsList$ids <- c(self@AOISetsList$ids, id)
self@AOISetsList$AOISets <- c(self@AOISetsList$AOISets, AOISetObject)
return(self)
}
)
# Method adds a dataRecord object into the DataSample object
## Method prevents duplicates in DataSample (by a composite key: expID, subjectID, trialID)
setMethod("addDataRecord",  "DataSample",
function(self, dataRecord)
{
expID <- dataRecord@expID
subjectID <- dataRecord@subjectID
trialID <- dataRecord@trialID
complexKey <- list(expID = expID, subjectID = subjectID, trialID = trialID)
if (tail(duplicated(rbind(self@keys,complexKey)),1))
{
warning("Such a record already exists!")
return(self)
} else
{
if (nrow(self@keys) == 0)
{
self@keys <- data.frame(complexKey)
self@eyesDataObjectsList <- append(self@eyesDataObjectsList, dataRecord@eyesDataObject)
self@analysisResultsList <- append(self@analysisResultsList, dataRecord@analysisResults)
self@statisticsList <- append(self@statisticsList, dataRecord@statistics)
return(self)
}
self@keys <- rbind(self@keys, complexKey)
self@eyesDataObjectsList <- append(self@eyesDataObjectsList, dataRecord@eyesDataObject)
self@analysisResultsList <- append(self@analysisResultsList, dataRecord@analysisResults)
self@statisticsList <- append(self@statisticsList, dataRecord@statistics)
return(self)
}
}
)
# Method returns a data frame with data records composite keys values (for further use for data filtering)
setMethod("printDataSampleKeys", "DataSample",
function(self)
{
return(self@keys)
}
)
# Method adds the factor id and value into Factors list
## Method prevents adding values for factors which have already been set
setMethod("addFactor",  "Factors",
function(self, factorID, value)
{
factorPosition <- which(self@factorsList$ids == factorID)
if (factorPosition != 0)
{
stop(paste("Factor with ID", factorID, "has been set already! Its value is", self@factorsList$values[[factorPosition]]))
}
self@factorsList$ids <- c(self@factorsList$ids, factorID)
self@factorsList$values <- c(self@factorsList$values, value)
return(self)
}
)
# Method updates factor's value by factorID if it exists in Factors object
setMethod("updateFactor",  "Factors",
function(self, factorID, value)
{
factorPosition <- which(self@factorsList$ids == factorID)
if (factorPosition == 0)
{
stop(paste("Factor with ID", factorID, "not found!"))
}
self@factorsList$values[[factorPosition]] <- value
return(self)
}
)
# Method adds the factors object for given owner into Factors Data object
## Method prevents adding duplicate records
setMethod("addFactorsRecord",  "FactorsData",
function(self, owner, ownerID, factors)
{
if (any(self@owners == owner & self@ownersIDs == ownerID))
{
stop(paste("Factors values record for object", owner, "with ID", ownerID, "already exists! You can add factor value into record or replace a record."))
}
self@owner == owner
self@ownerID = ownerID
self@factors = factors
return(self)
}
)
# Method replaces a factors record in FactorsData
## Method checks if a record for specific owner and ownerID exists
## TO DO: test method, add method's documentation
setMethod("replaceFactorsRecord",  "FactorsData",
function(self, owner, ownerID, factors)
{
factorRecordPosition <- which(self@owners == owner & self@ownersIDs == ownerID)
if (factorRecordPosition == 0)
{
stop(paste("There is no factors values record for object", owner, "with ID", ownerID, "You can add a new factor record."))
}
self@factors[[factorRecordPosition]] <- factors
return(self)
}
)
# Method updates a value of the specific factor's in existing record
## Method checks if a record for specific owner and ownerID exists
setMethod("updateFactorsRecord",  "FactorsData",
function(self, owner, ownerID, factorID, value)
{
factorRecordPosition <- which(self@owners == owner & self@ownersIDs == ownerID)
if (factorRecordPosition == 0)
{
stop(paste("There is no factors record for object", owner, "with ID", ownerID, "You can add a new factor record."))
}
self@factors[[factorRecordPosition]] <- updateFactor(self = self@factors[[factorRecordPosition]], factorID = factorID, value = value)
return(self)
}
)
createRawDataRec <- function(filePath, readSettings, useExt, extFun, extSettings)
{
if (!file.exists(filePath))
{
stop("Datafile not found!")
}
else
{
if (useExt)
{
# implement data loading using extFun
extData <- extFun(filePath, readSettings, extSettings)
headerLines <- extData[[1]]
asIsData <- extData[[2]]
rawDataRecord <- new(Class = "RawDataRecord",
filePath = filePath,
headerLines = headerLines,
data = asIsData)
}
else
{
settings <- readSettings@readSettings
headerLines <- readLines(con = filePath, n = settings$skip, encoding = settings$encoding)
asIsData <- read.csv(filePath, sep = settings$sep,
skip = settings$skip,
comment.char = settings$comment.char,
header = settings$header,
blank.lines.skip = T,
check.names = F,
stringsAsFactors = F)
rawDataRecord <- new(Class = "RawDataRecord",
filePath = filePath,
headerLines = headerLines,
data = asIsData)
}
}
rawDataRecord
}
## TO DO: prevent creating duplicate records
setMethod("addRawDataRecord",  "RawDataRecords",
function(self, filepath, readSettings, useExt, extFun, extSettings)
{
newRawDataRec <- createRawDataRec(filePath = filepath, readSettings = readSettings, useExt = useExt, extFun = extFun, extSettings = extSettings)
rawDataRecCnt <- length(self@rawDataRecordsList$fileNumbers)
if (rawDataRecCnt == 0)
{
self@rawDataRecordsList$fileNumbers <- 1
self@rawDataRecordsList$rawDataRecords <- list(newRawDataRec)
return(self)
}
fileNum <- tail(self@rawDataRecordsList$fileNumbers, n = 1) + 1
self@rawDataRecordsList$fileNumbers <- c(self@rawDataRecordsList$fileNumbers, fileNum)
self@rawDataRecordsList$rawDataRecords <- c(self@rawDataRecordsList$rawDataRecords, newRawDataRec)
return(self)
}
)
## TO DO: prevent creating duplicate records
setMethod("addRawDataRecords",  "RawDataRecords",
function(self, filesFolder, readSettings, useExt, extFun, extSettings)
{
if (!file.exists(filesFolder))
{
stop("Data folder not found!")
}
filesToRead <- list.files(path = filesFolder, pattern = NULL, all.files = FALSE,
full.names = TRUE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
rawDataRecords <- lapply(filesToRead, FUN = createRawDataRec, readSettings = readSettings, useExt = useExt, extFun = extFun, extSettings = extSettings)
rawDataRecCnt <- length(self@rawDataRecordsList$fileNumbers)
if (rawDataRecCnt == 0)
{
firstFileNum <- 1
}
else
{
firstFileNum <- tail(self@rawDataRecordsList$fileNumbers, n = 1) + 1
}
filesCnt <- length(rawDataRecords)
fileNumbers <- seq(firstFileNum, length.out = filesCnt)
self@rawDataRecordsList$fileNumbers <- c(self@rawDataRecordsList$fileNumbers, fileNumbers)
self@rawDataRecordsList$rawDataRecords <- c(self@rawDataRecordsList$rawDataRecords, rawDataRecords)
return(self)
}
)
createDataRecordObject <- function(data, dataFields, fieldNames, conditions)
{
eyeDataObject <- new(Class = "EyesData", fieldNames = fieldNames, conditions = conditions)
if (!is.na(dataFields@availableFields$time))
{
times <- new(Class = "TimeSamples", time = data[,dataFields@availableFields$time])
eyeDataObject@time <- times
}
if (!is.na(dataFields@availableFields$frame))
{
frames <- new(Class = "FrameSamples", frame = as.numeric(data[,dataFields@availableFields$frame]))
eyeDataObject@frame <- frames
}
if (conditions@conditions$eye == "left")
{
porx <- data[,dataFields@availableFields$lporx]
pory <- data[,dataFields@availableFields$lpory]
eyeSamples <- new(Class = "TrajectorySamples", eyeData = data.frame(porx, pory))
eyeDataObject@leftEyeSamples <- eyeSamples
if (conditions@conditions$pupilShape == "circle")
{
pupxsize <- data[,dataFields@availableFields$lpupxsize]
pupSamples <- new(Class = "PupilSamples", pupilData = data.frame(pupxsize))
eyeDataObject@leftPupilSamples <- pupSamples
}
if (conditions@conditions$pupilShape == "ellipse")
{
pupxsize <- data[,dataFields@availableFields$lpupxsize]
pupysize <- data[,dataFields@availableFields$lpupysize]
pupSamples <- new(Class = "PupilSamples", pupilData = data.frame(pupxsize, pupysize))
eyeDataObject@leftPupilSamples <- pupSamples
}
}
if (conditions@conditions$eye == "right")
{
porx <- data[,dataFields@availableFields$rporx]
pory <- data[,dataFields@availableFields$rpory]
eyeSamples <- new(Class = "TrajectorySamples", eyeData = data.frame(porx, pory))
eyeDataObject@rightEyeSamples <- eyeSamples
if (conditions@conditions$pupilShape == "circle")
{
pupxsize <- data[,dataFields@availableFields$rpupxsize]
pupSamples <- new(Class = "PupilSamples", pupilData = data.frame(pupxsize))
eyeDataObject@rightPupilSamples <- pupSamples
}
if (conditions@conditions$pupilShape == "ellipse")
{
pupxsize <- data[,dataFields@availableFields$rpupxsize]
pupysize <- data[,dataFields@availableFields$rpupysize]
pupSamples <- new(Class = "PupilSamples", pupilData = data.frame(pupxsize, pupysize))
eyeDataObject@rightPupilSamples <- pupSamples
}
}
if (conditions@conditions$eye == "both")
{
lporx <- data[,dataFields@availableFields$lporx]
lpory <- data[,dataFields@availableFields$lpory]
rporx <- data[,dataFields@availableFields$rporx]
rpory <- data[,dataFields@availableFields$rpory]
leftEyeSamples <- new(Class = "TrajectorySamples", eyeData = data.frame(lporx, lpory))
rightEyeSamples <- new(Class = "TrajectorySamples", eyeData = data.frame(rporx, rpory))
eyeDataObject@leftEyeSamples <- leftEyeSamples
eyeDataObject@rightEyeSamples <- rightEyeSamples
if (conditions@conditions$pupilShape == "circle")
{
lpupxsize <- data[,dataFields@availableFields$lpupxsize]
rpupxsize <- data[,dataFields@availableFields$rpupxsize]
leftPupSamples <- new(Class = "PupilSamples", pupilData = data.frame(lpupxsize))
rightPupSamples <- new(Class = "PupilSamples", pupilData = data.frame(rpupxsize))
eyeDataObject@leftPupilSamples <- leftPupSamples
eyeDataObject@rightPupilSamples <- rightPupSamples
}
if (conditions@conditions$pupilShape == "ellipse")
{
lpupxsize <- data[,dataFields@availableFields$lpupxsize]
rpupxsize <- data[,dataFields@availableFields$rpupxsize]
lpupysize <- data[,dataFields@availableFields$lpupysize]
rpupysize <- data[,dataFields@availableFields$rpupysize]
leftPupSamples <- new(Class = "PupilSamples", pupilData = data.frame(lpupxsize, lpupysize))
rightPupSamples <- new(Class = "PupilSamples", pupilData = data.frame(rpupxsize, rpupysize))
eyeDataObject@leftPupilSamples <- leftPupSamples
eyeDataObject@rightPupilSamples <- rightPupSamples
}
}
if (!is.na(dataFields@availableFields$leftAdditionalFields[1]) & conditions@conditions$eye == "left")
{
leftAddSmp <- lapply(dataFields@availableFields$leftAdditionalFields, FUN = function(x) {data[,x]})
leftAddSmp <- new(Class = "OtherSamples", otherData = as.data.frame(leftAddSmp))
eyeDataObject@leftAdditionalSamples <- leftAddSmp
}
if (!is.na(dataFields@availableFields$rightAdditionalFields[1]) & conditions@conditions$eye == "right")
{
rightAddSmp <- lapply(dataFields@availableFields$rightAdditionalFields, FUN = function(x) {data[,x]})
rightAddSmp <- new(Class = "OtherSamples", otherData = as.data.frame(rightAddSmp))
eyeDataObject@rightAdditionalSamples <- rightAddSmp
}
if (!is.na(dataFields@availableFields$leftAdditionalFields[1]) &
!is.na(dataFields@availableFields$rightAdditionalFields[1]) & conditions@conditions$eye == "both")
{
leftAddSmp <- lapply(dataFields@availableFields$leftAdditionalFields, FUN = function(x) {data[,x]})
leftAddSmp <- new(Class = "OtherSamples", otherData = as.data.frame(leftAddSmp))
rightAddSmp <- lapply(dataFields@availableFields$rightAdditionalFields, FUN = function(x) {data[,x]})
rightAddSmp <- new(Class = "OtherSamples", otherData = as.data.frame(rightAddSmp))
eyeDataObject@leftAdditionalSamples = leftAddSmp
eyeDataObject@rightAdditionalSamples = rightAddSmp
}
return(eyeDataObject)
}
# Searching for a string with a key specified and extracting everything after a colon considering specified separator
findKeyValue <- function(key, sep, headerLines)
{
## Searching for a string with a UNIQUE key specified (may be problems with common keys' strings)
if (any(grepl(pattern = key, x = headerLines)))
{
## If there's any string with a key then we read it
stringNum <- grep(pattern = key, x = headerLines)
string <- headerLines[stringNum]
## Searching for a colon in a string with a key and a colon
keyPos <- regexpr(pattern = paste(key, ":", sep = ""), string)
keyStart <- keyPos[1]
keyLen <- attr(keyPos, "match.length")
## Finding a colon
colonPos <- regexpr(pattern = ":", string)[1]
## Reading everythin after a colon
keyRawVal <- substr(x = string, start = colonPos+1, stop = nchar(string))
## Deleting spaces
keyRawVal <- gsub(" ", "", keyRawVal)
## Parsing key value(s)
res <- regmatches(keyRawVal, gregexpr(sep, keyRawVal), invert = T)[[1]][-1]
} else
{
res <- NA
}
res
}
# method returns a list with EyesData objects and additional info:
# filePath, subjectCode, trialsNums, stimDim, framesCnt
setMethod("parseDataRecord",  "RawDataRecord",
function(self, parser)
{
fun <- parser@fun
settings <- parser@settings
res <- fun(self, settings)
return(res)
}
)
## TO DO: implement a method that adds a specific DataRecord object into a DataSample object
setMethod("dataFilter", "DataRecord",
function(self, filter)
{
fun <- filter@fun
settings <- filter@settings
res <- fun(self, settings)
return(res)
}
)
setMethod("dataSmoother", "DataRecord",
function(self, smoother)
{
fun <- smoother@fun
settings <- smoother@settings
res <- fun(self, settings)
return(res)
}
)
setMethod("plotXY", "DataRecord",
function(self, eye, period, onStimulus, smoother = NA)
{
}
)
setMethod("plotXt", "DataRecord",
function(self, eye, period, channel, angular)
{
# channel - 1, 2, 3, 4, 5, 6, 7, ...
# angular is possible for 1 and 2 channels (i.e. X(t) or Y(t) plot)
# period is period of time in sec from trial's start
}
)
setMethod("eventDetector", "DataRecord",
function(self, detector)
{
fun <- detector@fun
settings <- detector@settings
res <- fun(self, settings)
return(res)
}
)
setMethod("detectEvents",  "DataRecord",
function(self, filter, smoother, detector)
{
self <- dataFilter(self, filter)
self <- dataSmoother(self, smoother)
self <- eventDetector(self, detector)
return(self)
}
)
