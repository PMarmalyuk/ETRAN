iris
гтшйгу(пкшв)
unique(grid)
grid
grid <- expand.grid(t = names(timings), a = names(abilities))
abilities = list(a_low = c(0,0.48), a_avg = c(0.48,0.6), a_high = c(0.6,1))
timings = list(t_low = c(0,30), t_avg = c(30,40), t_high = c(40,80))
grid <- expand.grid(t = names(timings), a = names(abilities))
unique(grid)
levels(grid)
grid
grid <- expand.grid(t = names(timings), a = names(abilities))
abilities = list(a_low = c(0,0.48), a_avg = c(0.48,0.6), a_high = c(0.6,1))
timings = list(t_low = c(0,30), t_avg = c(30,40), t_high = c(40,80))
grid <- expand.grid(t = names(timings), a = names(abilities))
levels(grid)
grid
x <- rnorm(100)
order(x)
?order
x[order(x)]
x[order(x, decreasing = T)]
order(x, decreasing = T)
classesFolder <- "F:\\Институт\\Проекты\\EyeTrackingPackage\\Git\\EyeTrackingProject\\Classes"
setwd(classesFolder)
source("extFunctionsClasses.R")
source("optionsAndSettingsClasses.R")
source("baseEyeDataClasses.R")
source("baseClasses.R")
source("listsAndTablesClasses.R")
setGeneric("addFactor", function(self, factorID, value){standardGeneric("addFactor")})
setGeneric("addFactor", function(self, factorID, value){standardGeneric("updateFactor")})
setGeneric("addFactor", function(self, factorID, value){standardGeneric("addFactor")})
setGeneric("updateFactor", function(self, factorID, value){standardGeneric("updateFactor")})
list <- list(list(1,2,3,4,5), list(5,4,3,2,1))
list
list <- list(ids = list(1,2,3,4,5), values = list(5,4,3,2,1))
which(list$ids == 1)
which(list$ids == 3)
which(list$ids == 7)
list$values[[3]]
list$values[[3]] <- 6
list$values[[3]]
setMethod("updateFactor",  "Factors",
function(self, factorID, value)
{
factorPosition <- which(self@factorsList$ids == factorID)
if (factorPosition == 0)
{
stop(paste("Factor with ID", factorID, "not found!")
}
self@factorsList$values[[factorPosition]] <- value
}
)
setMethod("updateFactor",  "Factors",
function(self, factorID, value)
{
factorPosition <- which(self@factorsList$ids == factorID)
if (factorPosition == 0)
{
stop(paste("Factor with ID", factorID, "not found!")
}
self@factorsList$values[[factorPosition]] <- value
return(self)
}
)
setMethod("updateFactor",  "Factors",
function(self, factorID, value)
{
factorPosition <- which(self@factorsList$ids == factorID)
if (factorPosition == 0)
{
stop(paste("Factor with ID", factorID, "not found!"))
}
self@factorsList$values[[factorPosition]] <- value
return(self)
}
)
setMethod("addFactor",  "Factors",
function(self, factorID, value)
{
factorPosition <- which(self@factorsList$ids == factorID)
if (factorPosition != 0)
{
stop(paste("Factor with ID", factorID, "has been set already! Its value is", self@factorsList$values[[factorPosition]]))
}
self@factorsList$ids <- c(self@factorsList$ids, factorID)
self@factorsList$values <- c(self@factorsList$values, value)
return(self)
}
)
setMethod("updateFactor",  "Factors",
function(self, factorID, value)
{
factorPosition <- which(self@factorsList$ids == factorID)
if (factorPosition == 0)
{
stop(paste("Factor with ID", factorID, "not found!"))
}
self@factorsList$values[[factorPosition]] <- value
return(self)
}
)
setMethod("updateFactorsRecord",  "FactorsData",
function(self, owner, ownerID, factorID, value)
{
factorRecordPosition <- which(self@owners == owner & self@ownersIDs == ownerID)
if (factorRecordPosition == 0)
{
stop(paste("There is no factors values record for object", owner, "with ID", ownerID, "You can add a new factor record."))
}
self@factors[[factorRecordPosition]] <- updateFactor(self = self@factors[[factorRecordPosition]], factorID = factorID, value = value)
return(self)
}
)
setGeneric("addFactorsRecord", function(self, owner, ownerId, factors){standardGeneric("addFactorsRecord")})
setGeneric("addFactorsRecord", function(self, owner, ownerID, factors){standardGeneric("addFactorsRecord")})
setGeneric("addFactorsRecord", function(self, owner, ownerID, factors){standardGeneric("addFactorsRecord")})
setGeneric("replaceFactorsRecord", function(self, owner, ownerID, factors){standardGeneric("replaceFactorsRecord")})
setGeneric("updateFactorsRecord", function(self, owner, ownerID, factorID, value){standardGeneric("updateFactorsRecord")})
setMethod("addFactorsRecord",  "FactorsData",
function(self, owner, ownerID, factors)
{
if any(self@owners == owner & self@ownersIDs == ownerID)
{
stop(paste("Factors values record for object", owner, "with ID", ownerID, "already exists! You can add factor value into record or replace a record."))
}
self@owner == owner
self@ownerID = ownerID
self@factors = factors
return(self)
}
)
setMethod("addFactorsRecord",  "FactorsData",
function(self, owner, ownerID, factors)
{
if (any(self@owners == owner & self@ownersIDs == ownerID))
{
stop(paste("Factors values record for object", owner, "with ID", ownerID, "already exists! You can add factor value into record or replace a record."))
}
self@owner == owner
self@ownerID = ownerID
self@factors = factors
return(self)
}
)
setMethod("replaceFactorsRecord",  "FactorsData",
function(self, owner, ownerID, factors)
{
factorRecordPosition <- which(self@owners == owner & self@ownersIDs == ownerID)
if (factorRecordPosition == 0)
{
stop(paste("There is no factors values record for object", owner, "with ID", ownerID, "You can add a new factor record."))
}
self@factors[[factorRecordPosition]] <- factors
return(self)
}
)
setMethod("updateFactorsRecord",  "FactorsData",
function(self, owner, ownerID, factorID, value)
{
factorRecordPosition <- which(self@owners == owner & self@ownersIDs == ownerID)
if (factorRecordPosition == 0)
{
stop(paste("There is no factors values record for object", owner, "with ID", ownerID, "You can add a new factor record."))
}
self@factors[[factorRecordPosition]] <- updateFactor(self = self@factors[[factorRecordPosition]], factorID = factorID, value = value)
return(self)
}
)
