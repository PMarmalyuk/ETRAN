}
})
print(res)
res2left <- unlist(res[1], recursive = F)
print(res2left)
stop()
res2right <- unlist(res[2], recursive = F)
res3left <- res2left[sapply(res2left, FUN = function(x) {ifelse(is.null(x),F,T)})]
res3right <- res2right[sapply(res2right, FUN = function(x) {ifelse(is.null(x),F,T)})]
DataRecord@statistics$left <- res3left
DataRecord@statistics$right <- res3right
return(DataRecord)
}
dataRec@statistics$left <- list()
dataRec@statistics$right <- list()
estimator <- createEstimator(name = "Standard Estimator", fun = coreEstimator,
settings = list(subFunctions = list(f7, f8)))
res <- estimateParams(self = dataRec, estimator = estimator)
coreEstimator <- function(DataRecord, settings)
{
subFunctions <- settings$subFunctions
res <- lapply(subFunctions, FUN = function(x)
{
fun <- x@fun
settings <- x@settings
applyTo <- x@applyTo
if (applyTo == "EyesData")
{
if (DataRecord@eyesDataObject@conditions@conditions$eye == "left")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
resLeft <- fun(data = eyeData, settings = settings)
resRight <- list(par = NULL)
return(list(resLeft, resRight))
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "right")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- list(par = NULL)
resRight <- fun(data = eyeData, settings = settings)
return(list(resLeft, resRight))
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "both")
{
leftEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
rightEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- fun(data = leftEyeData, settings = settings)
resRight <- fun(data = rightEyeData, settings = settings)
return(list(resLeft, resRight))
}
}
})
#print(res)
res2left <- unlist(res[1], recursive = F)
print(res2left)
stop()
res2right <- unlist(res[2], recursive = F)
res3left <- res2left[sapply(res2left, FUN = function(x) {ifelse(is.null(x),F,T)})]
res3right <- res2right[sapply(res2right, FUN = function(x) {ifelse(is.null(x),F,T)})]
DataRecord@statistics$left <- res3left
DataRecord@statistics$right <- res3right
return(DataRecord)
}
estimator <- createEstimator(name = "Standard Estimator", fun = coreEstimator,
settings = list(subFunctions = list(f7, f8)))
res <- estimateParams(self = dataRec, estimator = estimator)
res@statistics$right
res <- estimateParams(self = dataRec, estimator = estimator)
res <- estimateParams(self = dataRec, estimator = estimator)
dataRec@statistics$left <- list()
dataRec@statistics$right <- list()
estimator <- createEstimator(name = "Standard Estimator", fun = coreEstimator,
settings = list(subFunctions = list(f7, f8)))
res <- estimateParams(self = dataRec, estimator = estimator)
coreEstimator <- function(DataRecord, settings)
{
subFunctions <- settings$subFunctions
res <- lapply(subFunctions, FUN = function(x)
{
fun <- x@fun
settings <- x@settings
applyTo <- x@applyTo
if (applyTo == "EyesData")
{
if (DataRecord@eyesDataObject@conditions@conditions$eye == "left")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
resLeft <- fun(data = eyeData, settings = settings)
resRight <- list(par = NULL)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "right")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- list(par = NULL)
resRight <- fun(data = eyeData, settings = settings)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "both")
{
leftEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
rightEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- fun(data = leftEyeData, settings = settings)
resRight <- fun(data = rightEyeData, settings = settings)
}
return(list(resLeft = resLeft, resRight = resRight))
}
})
#print(res)
res2left <- unlist(res$resLeft, recursive = F)
print(res2left)
stop()
res2right <- unlist(res[2], recursive = F)
res3left <- res2left[sapply(res2left, FUN = function(x) {ifelse(is.null(x),F,T)})]
res3right <- res2right[sapply(res2right, FUN = function(x) {ifelse(is.null(x),F,T)})]
DataRecord@statistics$left <- res3left
DataRecord@statistics$right <- res3right
return(DataRecord)
}
dataRec@statistics$left <- list()
dataRec@statistics$right <- list()
estimator <- createEstimator(name = "Standard Estimator", fun = coreEstimator,
settings = list(subFunctions = list(f7, f8)))
res <- estimateParams(self = dataRec, estimator = estimator)
coreEstimator <- function(DataRecord, settings)
{
subFunctions <- settings$subFunctions
res <- lapply(subFunctions, FUN = function(x)
{
fun <- x@fun
settings <- x@settings
applyTo <- x@applyTo
if (applyTo == "EyesData")
{
if (DataRecord@eyesDataObject@conditions@conditions$eye == "left")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
resLeft <- fun(data = eyeData, settings = settings)
resRight <- list(par = NULL)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "right")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- list(par = NULL)
resRight <- fun(data = eyeData, settings = settings)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "both")
{
leftEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
rightEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- fun(data = leftEyeData, settings = settings)
resRight <- fun(data = rightEyeData, settings = settings)
}
return(list(resLeft = resLeft, resRight = resRight))
}
})
#print(res)
#res2left <- unlist(res$resLeft, recursive = F)
print(res$resLeft)
stop()
res2right <- unlist(res[2], recursive = F)
res3left <- res2left[sapply(res2left, FUN = function(x) {ifelse(is.null(x),F,T)})]
res3right <- res2right[sapply(res2right, FUN = function(x) {ifelse(is.null(x),F,T)})]
DataRecord@statistics$left <- res3left
DataRecord@statistics$right <- res3right
return(DataRecord)
}
dataRec@statistics$left <- list()
dataRec@statistics$right <- list()
estimator <- createEstimator(name = "Standard Estimator", fun = coreEstimator,
settings = list(subFunctions = list(f7, f8)))
res <- estimateParams(self = dataRec, estimator = estimator)
coreEstimator <- function(DataRecord, settings)
{
subFunctions <- settings$subFunctions
res <- lapply(subFunctions, FUN = function(x)
{
fun <- x@fun
settings <- x@settings
applyTo <- x@applyTo
if (applyTo == "EyesData")
{
if (DataRecord@eyesDataObject@conditions@conditions$eye == "left")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
resLeft <- fun(data = eyeData, settings = settings)
print(resLeft)
resRight <- list(par = NULL)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "right")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- list(par = NULL)
resRight <- fun(data = eyeData, settings = settings)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "both")
{
leftEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
rightEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- fun(data = leftEyeData, settings = settings)
resRight <- fun(data = rightEyeData, settings = settings)
}
return(list(resLeft = resLeft, resRight = resRight))
}
})
#print(res)
#res2left <- unlist(res$resLeft, recursive = F)
print(res$resLeft)
stop()
res2right <- unlist(res[2], recursive = F)
res3left <- res2left[sapply(res2left, FUN = function(x) {ifelse(is.null(x),F,T)})]
res3right <- res2right[sapply(res2right, FUN = function(x) {ifelse(is.null(x),F,T)})]
DataRecord@statistics$left <- res3left
DataRecord@statistics$right <- res3right
return(DataRecord)
}
dataRec@statistics$left <- list()
dataRec@statistics$right <- list()
estimator <- createEstimator(name = "Standard Estimator", fun = coreEstimator,
settings = list(subFunctions = list(f7, f8)))
res <- estimateParams(self = dataRec, estimator = estimator)
coreEstimator <- function(DataRecord, settings)
{
subFunctions <- settings$subFunctions
res <- lapply(subFunctions, FUN = function(x)
{
fun <- x@fun
settings <- x@settings
applyTo <- x@applyTo
if (applyTo == "EyesData")
{
if (DataRecord@eyesDataObject@conditions@conditions$eye == "left")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
resLeft <- fun(data = eyeData, settings = settings)
resRight <- list(par = NULL)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "right")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- list(par = NULL)
resRight <- fun(data = eyeData, settings = settings)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "both")
{
leftEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
rightEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- fun(data = leftEyeData, settings = settings)
resRight <- fun(data = rightEyeData, settings = settings)
}
}
return(list(resLeft = resLeft, resRight = resRight))
})
#print(res)
#res2left <- unlist(res$resLeft, recursive = F)
res2 <- unlist(res)
print(res2)
stop()
res2right <- unlist(res[2], recursive = F)
res3left <- res2left[sapply(res2left, FUN = function(x) {ifelse(is.null(x),F,T)})]
res3right <- res2right[sapply(res2right, FUN = function(x) {ifelse(is.null(x),F,T)})]
DataRecord@statistics$left <- res3left
DataRecord@statistics$right <- res3right
return(DataRecord)
}
dataRec@statistics$left <- list()
dataRec@statistics$right <- list()
estimator <- createEstimator(name = "Standard Estimator", fun = coreEstimator,
settings = list(subFunctions = list(f7, f8)))
res <- estimateParams(self = dataRec, estimator = estimator)
coreEstimator <- function(DataRecord, settings)
{
subFunctions <- settings$subFunctions
res <- lapply(subFunctions, FUN = function(x)
{
fun <- x@fun
settings <- x@settings
applyTo <- x@applyTo
if (applyTo == "EyesData")
{
if (DataRecord@eyesDataObject@conditions@conditions$eye == "left")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
resLeft <- fun(data = eyeData, settings = settings)
resRight <- list(par = NULL)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "right")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- list(par = NULL)
resRight <- fun(data = eyeData, settings = settings)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "both")
{
leftEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
rightEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- fun(data = leftEyeData, settings = settings)
resRight <- fun(data = rightEyeData, settings = settings)
}
}
return(list(resLeft = resLeft, resRight = resRight))
})
res2left <- lapply(res, FUN = function(x) {return(x$resLeft)})
res2right <- lapply(res, FUN = function(x) {return(x$resRight)})
print(res2left)
stop()
res3left <- res2left[sapply(res2left, FUN = function(x) {ifelse(is.null(x),F,T)})]
res3right <- res2right[sapply(res2right, FUN = function(x) {ifelse(is.null(x),F,T)})]
DataRecord@statistics$left <- res3left
DataRecord@statistics$right <- res3right
return(DataRecord)
}
dataRec@statistics$left <- list()
dataRec@statistics$right <- list()
estimator <- createEstimator(name = "Standard Estimator", fun = coreEstimator,
settings = list(subFunctions = list(f7, f8)))
res <- estimateParams(self = dataRec, estimator = estimator)
coreEstimator <- function(DataRecord, settings)
{
subFunctions <- settings$subFunctions
res <- lapply(subFunctions, FUN = function(x)
{
fun <- x@fun
settings <- x@settings
applyTo <- x@applyTo
if (applyTo == "EyesData")
{
if (DataRecord@eyesDataObject@conditions@conditions$eye == "left")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
resLeft <- fun(data = eyeData, settings = settings)
resRight <- list(par = NULL)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "right")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- list(par = NULL)
resRight <- fun(data = eyeData, settings = settings)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "both")
{
leftEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
rightEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- fun(data = leftEyeData, settings = settings)
resRight <- fun(data = rightEyeData, settings = settings)
}
}
return(list(resLeft = resLeft, resRight = resRight))
})
res2left <- lapply(res, FUN = function(x) {return(unlist(x$resLeft, recursive = F))})
res2right <- lapply(res, FUN = function(x) {return(unlist(x$resRight,  recursive = F))})
print(res2left)
stop()
res3left <- res2left[sapply(res2left, FUN = function(x) {ifelse(is.null(x),F,T)})]
res3right <- res2right[sapply(res2right, FUN = function(x) {ifelse(is.null(x),F,T)})]
DataRecord@statistics$left <- res3left
DataRecord@statistics$right <- res3right
return(DataRecord)
}
dataRec@statistics$left <- list()
dataRec@statistics$right <- list()
estimator <- createEstimator(name = "Standard Estimator", fun = coreEstimator,
settings = list(subFunctions = list(f7, f8)))
res <- estimateParams(self = dataRec, estimator = estimator)
coreEstimator <- function(DataRecord, settings)
{
subFunctions <- settings$subFunctions
res <- lapply(subFunctions, FUN = function(x)
{
fun <- x@fun
settings <- x@settings
applyTo <- x@applyTo
if (applyTo == "EyesData")
{
if (DataRecord@eyesDataObject@conditions@conditions$eye == "left")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
resLeft <- fun(data = eyeData, settings = settings)
resRight <- list(par = NULL)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "right")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- list(par = NULL)
resRight <- fun(data = eyeData, settings = settings)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "both")
{
leftEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
rightEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- fun(data = leftEyeData, settings = settings)
resRight <- fun(data = rightEyeData, settings = settings)
}
}
return(list(resLeft = resLeft, resRight = resRight))
})
res2left <- lapply(res, FUN = function(x) {return(x$resLeft)})
res2right <- lapply(res, FUN = function(x) {return(x$resRight)})
res3left <- res2left[sapply(res2left, FUN = function(x) {ifelse(is.null(x),F,T)})]
res3right <- res2right[sapply(res2right, FUN = function(x) {ifelse(is.null(x),F,T)})]
DataRecord@statistics$left <- res3left
DataRecord@statistics$right <- res3right
return(DataRecord)
}
dataRec@statistics$left <- list()
dataRec@statistics$right <- list()
estimator <- createEstimator(name = "Standard Estimator", fun = coreEstimator,
settings = list(subFunctions = list(f7, f8)))
res <- estimateParams(self = dataRec, estimator = estimator)
res@statistics$right
res@statistics$left
coreEstimator <- function(DataRecord, settings)
{
subFunctions <- settings$subFunctions
res <- lapply(subFunctions, FUN = function(x)
{
fun <- x@fun
settings <- x@settings
applyTo <- x@applyTo
if (applyTo == "EyesData")
{
if (DataRecord@eyesDataObject@conditions@conditions$eye == "left")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
resLeft <- fun(data = eyeData, settings = settings)
resRight <- list(par = NULL)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "right")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- list(par = NULL)
resRight <- fun(data = eyeData, settings = settings)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "both")
{
leftEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
rightEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- fun(data = leftEyeData, settings = settings)
resRight <- fun(data = rightEyeData, settings = settings)
}
}
return(list(resLeft = resLeft, resRight = resRight))
})
res2left <- lapply(res, FUN = function(x) {return(x$resLeft)})
res2right <- lapply(res, FUN = function(x) {return(x$resRight)})
res3left <- res2left[sapply(res2left, FUN = function(x) {ifelse(is.null(x),F,T)})]
res3right <- res2right[sapply(res2right, FUN = function(x) {ifelse(is.null(x),F,T)})]
DataRecord@statistics$left <- unlist(res3left, recursive = F)
DataRecord@statistics$right <- unlist(res3right, recursive = F)
return(DataRecord)
}
estimator <- createEstimator(name = "Standard Estimator", fun = coreEstimator,
settings = list(subFunctions = list(f7, f8)))
res <- estimateParams(self = dataRec, estimator = estimator)
res@statistics$left
res@statistics$кшпре
res@statistics$right
coreEstimator <- function(DataRecord, settings)
{
subFunctions <- settings$subFunctions
res <- lapply(subFunctions, FUN = function(x)
{
fun <- x@fun
settings <- x@settings
applyTo <- x@applyTo
if (applyTo == "EyesData")
{
if (DataRecord@eyesDataObject@conditions@conditions$eye == "left")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
resLeft <- fun(data = eyeData, settings = settings)
resRight <- list(par = NULL)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "right")
{
eyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- list(par = NULL)
resRight <- fun(data = eyeData, settings = settings)
}
if (DataRecord@eyesDataObject@conditions@conditions$eye == "both")
{
leftEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "left")
rightEyeData <- getDataFrame(DataRecord@eyesDataObject, eye = "right")
resLeft <- fun(data = leftEyeData, settings = settings)
resRight <- fun(data = rightEyeData, settings = settings)
}
}
return(list(resLeft = resLeft, resRight = resRight))
})
res2left <- lapply(res, FUN = function(x) {return(x$resLeft)})
res2right <- lapply(res, FUN = function(x) {return(x$resRight)})
res3left <- res2left[sapply(res2left, FUN = function(x) {ifelse(is.null(x[[1]]),F,T)})]
res3right <- res2right[sapply(res2right, FUN = function(x) {ifelse(is.null(x[[1]]),F,T)})]
DataRecord@statistics$left <- unlist(res3left, recursive = F)
DataRecord@statistics$right <- unlist(res3right, recursive = F)
return(DataRecord)
}
estimator <- createEstimator(name = "Standard Estimator", fun = coreEstimator,
settings = list(subFunctions = list(f7, f8)))
res <- estimateParams(self = dataRec, estimator = estimator)
res@statistics$right
res@statistics$left
dataRec@statistics$left <- res@statistics$left
dataRec@statistics$right <- res@statistics$right
dataRec@statistics$right
dataRec@statistics$left
fix <- res@analysisResults$leftEventData@fixations@fixations
sac <- resEvents@analysisResults$leftEventData$s
df <- getDataFrame(resEvents@eyesDataObject, eye = "left")
sac$length[which(is.nan(sac$asymmetry))]
sac$peakAcceleration[which(is.nan(sac$asymmetry))]
df[df$eventGroup == sac$eventGroup[which(is.nan(sac$asymmetry))][15],]
plot(fix$positionX[10:20], fix$positionY[10:20], cex = fix$duration[10:20]/(max(fix$duration[10:20])), pch = 16, type = "b")
dataRec@analysisResults$leftEventData@saccades@saccades
